CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
PROJECT (cardano-c C)

# Find OS details
function(get_linux_lsb_release_information)
    find_program(LSB_RELEASE_EXEC lsb_release)
    if(NOT LSB_RELEASE_EXEC)
        message(FATAL_ERROR "Could not detect lsb_release executable, can not gather required information")
    endif()

    execute_process(COMMAND "${LSB_RELEASE_EXEC}" --short --id OUTPUT_VARIABLE LSB_RELEASE_ID_SHORT OUTPUT_STRIP_TRAILING_WHITESPACE)
    execute_process(COMMAND "${LSB_RELEASE_EXEC}" --short --release OUTPUT_VARIABLE LSB_RELEASE_VERSION_SHORT OUTPUT_STRIP_TRAILING_WHITESPACE)
    execute_process(COMMAND "${LSB_RELEASE_EXEC}" --short --codename OUTPUT_VARIABLE LSB_RELEASE_CODENAME_SHORT OUTPUT_STRIP_TRAILING_WHITESPACE)

    set(LSB_RELEASE_ID_SHORT "${LSB_RELEASE_ID_SHORT}" PARENT_SCOPE)
    set(LSB_RELEASE_VERSION_SHORT "${LSB_RELEASE_VERSION_SHORT}" PARENT_SCOPE)
    set(LSB_RELEASE_CODENAME_SHORT "${LSB_RELEASE_CODENAME_SHORT}" PARENT_SCOPE)
endfunction()

if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    get_linux_lsb_release_information()
endif()

# Option that the user can optionally select
OPTION (TESTING_ENABLED             "Enables unit test build." ON)

# Find external dependencies
LIST (APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# Get the target architecture platform.
INCLUDE (CMakeInstallDirs)
INCLUDE (TargetArch)

TARGET_ARCHITECTURE (ARCHITECTURE ARCHITECTURE_ALTERNATIVE_NAME)

# Set common variables.
IF ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  SET (BUILD_DIR build/debug)
ELSE ()
  SET (BUILD_DIR build/release)
ENDIF ()

SET (CARDANO_C_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/${BUILD_DIR})

IF (DEFINED VERSION_MAJOR)
  SET (CARDANO_C_VERSION_MAJOR ${VERSION_MAJOR})
ELSE ()
  SET (CARDANO_C_VERSION_MAJOR 0)
ENDIF ()

IF (DEFINED VERSION_MINOR)
  SET (CARDANO_C_VERSION_MINOR ${VERSION_MINOR})
ELSE ()
  SET (CARDANO_C_VERSION_MINOR 0)
ENDIF ()

IF (DEFINED VERSION_PATCH)
  SET (CARDANO_C_VERSION_PATCH ${VERSION_PATCH})
ELSE ()
  SET (CARDANO_C_VERSION_PATCH 0)
ENDIF ()

IF (DEFINED BUFFER_GROW_FACTOR )
    SET (CARDANO_C_BUFFER_GROW_FACTOR  ${BUFFER_GROW_FACTOR})
ELSE ()
    SET (CARDANO_C_BUFFER_GROW_FACTOR 2)
ENDIF ()

SET (CARDANO_C_VERSION "${CARDANO_C_VERSION_MAJOR}.${CARDANO_C_VERSION_MINOR}.${CARDANO_C_VERSION_PATCH}")

# Print variables to stdout.
MESSAGE ( STATUS "################################################################" )
MESSAGE ( STATUS "Building Cardano C v${CARDANO_C_VERSION}" )
MESSAGE ( STATUS )
MESSAGE ( STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}" )
MESSAGE ( STATUS "CMAKE_BUILD_TYPE     = ${CMAKE_BUILD_TYPE}" )
MESSAGE ( STATUS "CMAKE_PREFIX_PATH    = ${CMAKE_PREFIX_PATH}" )
MESSAGE ( STATUS "ARCHITECTURE         = ${ARCHITECTURE}" )
MESSAGE ( STATUS )
MESSAGE ( STATUS "TESTING ENABLED      = ${TESTING_ENABLED}")
MESSAGE ( STATUS )
MESSAGE ( STATUS "OS DISTRICUTION ID   = ${LSB_RELEASE_ID_SHORT}" )
MESSAGE ( STATUS "OS RELEASE           = ${LSB_RELEASE_VERSION_SHORT}" )
MESSAGE ( STATUS "OS CODENAME          = ${LSB_RELEASE_CODENAME_SHORT}" )
MESSAGE ( STATUS )
MESSAGE ( STATUS "change a configuration variable with: cmake -D<Variable>=<Value>" )
MESSAGE ( STATUS "################################################################" )

# Find external dependencies.
MESSAGE ( STATUS )
MESSAGE ( STATUS "Configuring basic solution settings:" )
MESSAGE ( STATUS )
INCLUDE (CMakeInstallDirs)
INCLUDE (ProcessDebugInformation)

# Enable unit test build
IF (TESTING_ENABLED)
    INCLUDE (CTest)
    ENABLE_TESTING ()

    FIND_PROGRAM (CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
    SET (MEMORYCHECK_COMMAND_OPTIONS "--trace-children=yes --leak-check=full")
ENDIF ()

# Find external dependencies.
MESSAGE ( STATUS )
MESSAGE ( STATUS "Configuring basic solution settings:" )
MESSAGE ( STATUS )

# Remove build directory on clean target.
SET_DIRECTORY_PROPERTIES (PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${PROJECT_BINARY_DIR}/${BUILD_DIR})

# Build libraries.
INCLUDE_DIRECTORIES(SYSTEM ./lib)

ADD_SUBDIRECTORY (lib ${BUILD_DIR}/lib)
SET (CARDANO_C_LIBRARY ${PROJECT_BINARY_DIR}/${BUILD_DIR}/cardano-c/libcardano-c.so)

INSTALL (
  DIRECTORY   ${CMAKE_CURRENT_SOURCE_DIR}/cmake
  DESTINATION ${CMAKE_INSTALL_DATADIR}/${CARDANO_C_DATA_DIR}
  COMPONENT   dev
  PATTERN     "cmake/"
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
)

# Packaging.
SET (CPACK_SOURCE_IGNORE_FILES ".git,.swp")
SET (CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)

SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY "Cardano C project.")
SET (CPACK_COMPONENT_DEV_DESCRIPTION   "Cardano C development files.")
SET (CPACK_COMPONENT_DBG_DESCRIPTION   "Cardano C development debug symbols.")

SET (CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/COPYING)
SET (CPACK_PACKAGE_VENDOR "Biglup.")
SET (CPACK_PACKAGE_VERSION ${CARDANO_C_VERSION})
SET (CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-${LSB_RELEASE_CODENAME_SHORT}-${ARCHITECTURE_ALTERNATIVE_NAME}")

# Debian.
SET (CPACK_SOURCE_GENERATOR DEB)
SET (CPACK_DEB_COMPONENT_INSTALL ON)
SET (CPACK_DEBIAN_COMPRESSION_TYPE "bzip2")
SET (CPACK_DEBIAN_PACKAGE_MAINTAINER "Angel Castillo <angel.castillob@protonmail.com>")

IF (ARCHITECTURE)
  SET (CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${ARCHITECTURE})
ENDIF ()

INCLUDE (CPack)
