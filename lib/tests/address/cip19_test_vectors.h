/**
 * \file cip19_test_vectors.h
 *
 * \author angel.castillo
 * \date   Apr 22, 2024
 *
 * Copyright 2024 Biglup Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an = "aS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef BIGLUP_LABS_INCLUDE_CARDANO_CIP19_TEST_VECTORS_H
#define BIGLUP_LABS_INCLUDE_CARDANO_CIP19_TEST_VECTORS_H

/* INCLUDES ******************************************************************/

#include <cardano/address/byron_address_attributes.h>
#include <cardano/address/stake_pointer.h>

#include <cardano/typedefs.h>
#include <string>

/* DECLARATIONS **************************************************************/

/**
 * \brief CIP-19 test vectors.
 *
 * Taken from https://cips.cardano.org/cip/CIP-19/#testvectors
 */
namespace Cip19TestVectors
{

static const std::string paymentKeyHashHex        = "9493315cd92eb5d8c4304e67b7e16ae36d61d34502694657811a2c8e";
static const std::string stakeKeyHashHex          = "337b62cfff6403a06a3acbc34f8c46003c69fe79a3628cefa9c47251";
static const std::string scriptHash               = "c37b1b5dc0669f1d3c61a6fddb2e8fde96be87b881c60bce8e8d542f";
static const std::string byronYoroiMainnetRootHex = "ba970ad36654d8dd8f74274b733452ddeab9a62a397746be3c42ccdd";
// clang-format off

static const byte_t paymentKeyHashBytes[] = {
    0x94, 0x93, 0x31, 0x5c, 0xd9, 0x2e, 0xb5, 0xd8, 0xc4, 0x30, 0x4e, 0x67, 0xb7, 0xe1, 0x6a, 0xe3,
    0x6d, 0x61, 0xd3, 0x45, 0x02, 0x69, 0x46, 0x57, 0x81, 0x1a, 0x2c, 0x8e
};

static const byte_t stakeKeyHashBytes[] = {
    0x33, 0x7b, 0x62, 0xcf, 0xff, 0x64, 0x03, 0xa0, 0x6a, 0x3a, 0xcb, 0xc3, 0x4f, 0x8c, 0x46, 0x00,
    0x3c, 0x69, 0xfe, 0x79, 0xa3, 0x62, 0x8c, 0xef, 0xa9, 0xc4, 0x72, 0x51
};

static const byte_t scriptHashBytes[] = {
    0xc3, 0x7b, 0x1b, 0x5d, 0xc0, 0x66, 0x9f, 0x1d, 0x3c, 0x61, 0xa6, 0xfd, 0xdb, 0x2e, 0x8f, 0xde,
    0x96, 0xbe, 0x87, 0xb8, 0x81, 0xc6, 0x0b, 0xce, 0x8e, 0x8d, 0x54, 0x2f
};

// clang-format on

static cardano_stake_pointer_t stakePointer = {
  .slot       = 2498243,
  .tx_index   = 27,
  .cert_index = 3
};

static cardano_byron_address_attributes_t byronAttributes = {
  .derivation_path      = { 0 },
  .derivation_path_size = 0,
  .magic                = -1
};

static const std::string basePaymentScriptStakeKey           = "addr1z8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gten0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgs9yc0hh";
static const std::string basePaymentKeyStakeScript           = "addr1yx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzerkr0vd4msrxnuwnccdxlhdjar77j6lg0wypcc9uar5d2shs2z78ve";
static const std::string basePaymentScriptStakeScript        = "addr1x8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gt7r0vd4msrxnuwnccdxlhdjar77j6lg0wypcc9uar5d2shskhj42g";
static const std::string testnetBasePaymentKeyStakeKey       = "addr_test1qz2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgs68faae";
static const std::string testnetBasePaymentScriptStakeKey    = "addr_test1zrphkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gten0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgsxj90mg";
static const std::string testnetBasePaymentKeyStakeScript    = "addr_test1yz2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzerkr0vd4msrxnuwnccdxlhdjar77j6lg0wypcc9uar5d2shsf5r8qx";
static const std::string testnetBasePaymentScriptStakeScript = "addr_test1xrphkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gt7r0vd4msrxnuwnccdxlhdjar77j6lg0wypcc9uar5d2shs4p04xh";
static const std::string testnetPointerKey                   = "addr_test1gz2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer5pnz75xxcrdw5vky";
static const std::string testnetPointerScript                = "addr_test12rphkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtupnz75xxcryqrvmw";
static const std::string testnetEnterpriseKey                = "addr_test1vz2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzerspjrlsz";
static const std::string testnetEnterpriseScript             = "addr_test1wrphkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcl6szpr";
static const std::string testnetRewardKey                    = "stake_test1uqehkck0lajq8gr28t9uxnuvgcqrc6070x3k9r8048z8y5gssrtvn";
static const std::string testnetRewardScript                 = "stake_test17rphkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcljw6kf";

static const std::string basePaymentKeyStakeKey = "addr1qx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer3n0d3vllmyqwsx5wktcd8cc3sq835lu7drv2xwl2wywfgse35a3x";
// clang-format off
static const byte_t basePaymentKeyStakeKeyBytes[] = {
    0x01, 0x94, 0x93, 0x31, 0x5c, 0xd9, 0x2e, 0xb5, 0xd8, 0xc4, 0x30, 0x4e, 0x67, 0xb7, 0xe1, 0x6a,
    0xe3, 0x6d, 0x61, 0xd3, 0x45, 0x02, 0x69, 0x46, 0x57, 0x81, 0x1a, 0x2c, 0x8e, 0x33, 0x7b, 0x62,
    0xcf, 0xff, 0x64, 0x03, 0xa0, 0x6a, 0x3a, 0xcb, 0xc3, 0x4f, 0x8c, 0x46, 0x00, 0x3c, 0x69, 0xfe,
    0x79, 0xa3, 0x62, 0x8c, 0xef, 0xa9, 0xc4, 0x72, 0x51 };

static const std::string byronMainnetYoroi    = "Ae2tdPwUPEZFRbyhz3cpfC2CumGzNkFBN2L42rcUc2yjQpEkxDbkPodpMAi";

// clang-format off
static const byte_t byronMainnetYoroiBytes[] = {
    0x82, 0xd8, 0x18, 0x58, 0x21, 0x83, 0x58, 0x1c, 0xba, 0x97, 0x0a, 0xd3, 0x66, 0x54, 0xd8, 0xdd,
    0x8f, 0x74, 0x27, 0x4b, 0x73, 0x34, 0x52, 0xdd, 0xea, 0xb9, 0xa6, 0x2a, 0x39, 0x77, 0x46, 0xbe,
    0x3c, 0x42, 0xcc, 0xdd, 0xa0, 0x00, 0x1a, 0x90, 0x26, 0xda, 0x5b
};
// clang-format on

static const std::string byronTestnetDaedalus = "37btjrVyb4KEB2STADSsj3MYSAdj52X5FrFWpw2r7Wmj2GDzXjFRsHWuZqrw7zSkwopv8Ci3VWeg6bisU9dgJxW5hb2MZYeduNKbQJrqz3zVBsu9nT";

// clang-format off
static const byte_t byronTestnetDaedalusBytes[] = {
    0x82, 0xd8, 0x18, 0x58, 0x49, 0x83, 0x58, 0x1c, 0x9c, 0x70, 0x85, 0x38, 0xa7, 0x63, 0xff, 0x27,
    0x16, 0x99, 0x87, 0xa4, 0x89, 0xe3, 0x50, 0x57, 0xef, 0x3c, 0xd3, 0x77, 0x8c, 0x05, 0xe9, 0x6f,
    0x7b, 0xa9, 0x45, 0x0e, 0xa2, 0x01, 0x58, 0x1e, 0x58, 0x1c, 0x9c, 0x17, 0x22, 0xf7, 0xe4, 0x46,
    0x68, 0x92, 0x56, 0xe1, 0xa3, 0x02, 0x60, 0xf3, 0x51, 0x0d, 0x55, 0x8d, 0x99, 0xd0, 0xc3, 0x91,
    0xf2, 0xba, 0x89, 0xcb, 0x69, 0x77, 0x02, 0x45, 0x1a, 0x41, 0x70, 0xcb, 0x17, 0x00, 0x1a, 0x69,
    0x79, 0x12, 0x6c
};
// clang-format on

static const std::string enterpriseKey = "addr1vx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzers66hrl8";

// clang-format off
static const byte_t enterpriseKeyBytes[] = {
  0x61, 0x94, 0x93, 0x31, 0x5c, 0xd9, 0x2e, 0xb5, 0xd8, 0xc4, 0x30, 0x4e, 0x67, 0xb7, 0xe1, 0x6a,
  0xe3, 0x6d, 0x61, 0xd3, 0x45, 0x02, 0x69, 0x46, 0x57, 0x81, 0x1a, 0x2c, 0x8e
};
// clang-format on

static const std::string enterpriseScript = "addr1w8phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcyjy7wx";

// clang-format off
static const byte_t enterpriseScriptBytes[] = {
  0x71, 0xc3, 0x7b, 0x1b, 0x5d, 0xc0, 0x66, 0x9f, 0x1d, 0x3c, 0x61, 0xa6, 0xfd, 0xdb, 0x2e, 0x8f,
  0xde, 0x96, 0xbe, 0x87, 0xb8, 0x81, 0xc6, 0x0b, 0xce, 0x8e, 0x8d, 0x54, 0x2f
};
// clang-format on

static const std::string rewardKey = "stake1uyehkck0lajq8gr28t9uxnuvgcqrc6070x3k9r8048z8y5gh6ffgw";

// clang-format off
static const byte_t rewardKeyBytes[] = {
  0xe1, 0x33, 0x7b, 0x62, 0xcf, 0xff, 0x64, 0x03, 0xa0, 0x6a, 0x3a, 0xcb, 0xc3, 0x4f, 0x8c, 0x46,
  0x00, 0x3c, 0x69, 0xfe, 0x79, 0xa3, 0x62, 0x8c, 0xef, 0xa9, 0xc4, 0x72, 0x51
};
// clang-format on

static const std::string rewardScript = "stake178phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtcccycj5";

// clang-format off
static const byte_t rewardScriptBytes[] = {
  0xf1, 0xc3, 0x7b, 0x1b, 0x5d, 0xc0, 0x66, 0x9f, 0x1d, 0x3c, 0x61, 0xa6, 0xfd, 0xdb, 0x2e, 0x8f,
  0xde, 0x96, 0xbe, 0x87, 0xb8, 0x81, 0xc6, 0x0b, 0xce, 0x8e, 0x8d, 0x54, 0x2f
};
// clang-format on

static const std::string pointerKey = "addr1gx2fxv2umyhttkxyxp8x0dlpdt3k6cwng5pxj3jhsydzer5pnz75xxcrzqf96k";

// clang-format off
static const byte_t pointerKeyBytes[] = {
  0x41, 0x94, 0x93, 0x31, 0x5c, 0xd9, 0x2e, 0xb5, 0xd8, 0xc4, 0x30, 0x4e, 0x67, 0xb7, 0xe1, 0x6a,
  0xe3, 0x6d, 0x61, 0xd3, 0x45, 0x02, 0x69, 0x46, 0x57, 0x81, 0x1a, 0x2c, 0x8e, 0x81, 0x98, 0xbd,
  0x43, 0x1b, 0x03
};
// clang-format on

static const std::string pointerScript = "addr128phkx6acpnf78fuvxn0mkew3l0fd058hzquvz7w36x4gtupnz75xxcrtw79hu";

// clang-format off
static const byte_t pointerScriptBytes[] = {
  0x51, 0xc3, 0x7b, 0x1b, 0x5d, 0xc0, 0x66, 0x9f, 0x1d, 0x3c, 0x61, 0xa6, 0xfd, 0xdb, 0x2e, 0x8f,
  0xde, 0x96, 0xbe, 0x87, 0xb8, 0x81, 0xc6, 0x0b, 0xce, 0x8e, 0x8d, 0x54, 0x2f, 0x81, 0x98, 0xbd,
  0x43, 0x1b, 0x03
};
// clang-format on

}; // namespace Cip19TestVectors

// clang-format on

#endif // BIGLUP_LABS_INCLUDE_CARDANO_CIP19_TEST_VECTORS_H