/**
 * \file witness_set.cpp
 *
 * \author angel.castillo
 * \date   Sep 22, 2024
 *
 * Copyright 2024 Biglup Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* INCLUDES ******************************************************************/

#include <cardano/error.h>

#include <cardano/cbor/cbor_reader.h>
#include <cardano/crypto/blake2b_hash.h>
#include <cardano/witness_set/witness_set.h>

#include "tests/allocators_helpers.h"

#include <allocators.h>

#include <gmock/gmock.h>

/* CONSTANTS *****************************************************************/

static const char* CBOR                       = "a100838258204a352f53eb4311d552aa9e1c6f0125846a3b607011d691f0e774d893d940b8525840c4f13cc397a50193061ce899b3eda906ad1adf3f3d515b52248ea5aa142781cd9c2ccc52ac62b2e1b5226de890104ec530bda4c38a19b691946da9addb3213f5825820290c08454c58a8c7fad6351e65a652460bd4f80f485f1ccfc350ff6a4d5bd4de5840026f47bab2f24da9690746bdb0e55d53a5eef45a969e3dd2873a3e6bb8ef3316d9f80489bacfd2f543108e284a40847ae7ce33fa358fcfe439a37990ad3107e98258204d953d6a9d556da3f3e26622c725923130f5733d1a3c4013ef8c34d15a070fd75840f9218e5a569c5ace38b1bb81e1f1c0b2d7fea2fe7fb913fdd06d79906436103345347a81494b83f83bf43466b0cebdbbdcef15384f67c255e826c249336ce2c7";
static const char* CONWAY_CBOR                = "a700838258204a352f53eb4311d552aa9e1c6f0125846a3b607011d691f0e774d893d940b8525840c4f13cc397a50193061ce899b3eda906ad1adf3f3d515b52248ea5aa142781cd9c2ccc52ac62b2e1b5226de890104ec530bda4c38a19b691946da9addb3213f5825820290c08454c58a8c7fad6351e65a652460bd4f80f485f1ccfc350ff6a4d5bd4de5840026f47bab2f24da9690746bdb0e55d53a5eef45a969e3dd2873a3e6bb8ef3316d9f80489bacfd2f543108e284a40847ae7ce33fa358fcfe439a37990ad3107e98258204d953d6a9d556da3f3e26622c725923130f5733d1a3c4013ef8c34d15a070fd75840f9218e5a569c5ace38b1bb81e1f1c0b2d7fea2fe7fb913fdd06d79906436103345347a81494b83f83bf43466b0cebdbbdcef15384f67c255e826c249336ce2c701848204038205098202818200581c3542acb3a64d80c29302260d62c3b87a742ad14abf855ebc6733081e830300818200581cb5ae663aaea8e500157bdf4baafd6f5ba0ce5759f7cd4101fc132f5402828458203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820000000000000000000000000000000000000000000000000000000000000000041a08458203d4017c3e863895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41a00384474601000022001047460100002200114746010000220012474601000022001304833bffffffffffffffff3bffffffffffffffff3bffffffffffffffff0584840000d8799f0102030405ff821b000086788ffc4e831b00015060e9e46451840100d8799f0102030405ff821b000086788ffc4e831b00015060e9e46451840200d8799f0102030405ff821b000086788ffc4e831b00015060e9e46451840300d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645106844746010000220010474601000022001147460100002200124746010000220013";
static const char* CONWAY_CBOR_WITH_SETS      = "a800d90102838258204a352f53eb4311d552aa9e1c6f0125846a3b607011d691f0e774d893d940b8525840c4f13cc397a50193061ce899b3eda906ad1adf3f3d515b52248ea5aa142781cd9c2ccc52ac62b2e1b5226de890104ec530bda4c38a19b691946da9addb3213f5825820290c08454c58a8c7fad6351e65a652460bd4f80f485f1ccfc350ff6a4d5bd4de5840026f47bab2f24da9690746bdb0e55d53a5eef45a969e3dd2873a3e6bb8ef3316d9f80489bacfd2f543108e284a40847ae7ce33fa358fcfe439a37990ad3107e98258204d953d6a9d556da3f3e26622c725923130f5733d1a3c4013ef8c34d15a070fd75840f9218e5a569c5ace38b1bb81e1f1c0b2d7fea2fe7fb913fdd06d79906436103345347a81494b83f83bf43466b0cebdbbdcef15384f67c255e826c249336ce2c701d90102848204038205098202818200581c3542acb3a64d80c29302260d62c3b87a742ad14abf855ebc6733081e830300818200581cb5ae663aaea8e500157bdf4baafd6f5ba0ce5759f7cd4101fc132f5402d90102828458203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820000000000000000000000000000000000000000000000000000000000000000041a08458203d4017c3e863895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41a003d9010284474601000022001047460100002200114746010000220012474601000022001304d90102833bffffffffffffffff3bffffffffffffffff3bffffffffffffffff05a482000082d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645182010082d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645182020082d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645182030082d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645106d9010284474601000022001047460100002200114746010000220012474601000022001307d90102844746010000220010474601000022001147460100002200124746010000220013";
static const char* VKEY_WITNESS_SET_CBOR      = "d90102848258203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a8258203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a8258203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a8258203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a";
static const char* NATIVE_SCRIPT_SET_CBOR     = "d90102848200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c378200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c378200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c378200581c966e394a544f242081e41d1965137b1bb412ac230d40ed5407821c37";
static const char* BOOTSTRAP_WITNESS_SET_CBOR = "d90102848458203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820000000000000000000000000000000000000000000000000000000000000000041a08458203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820000000000000000000000000000000000000000000000000000000000000000041a08458203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820000000000000000000000000000000000000000000000000000000000000000041a08458203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820000000000000000000000000000000000000000000000000000000000000000041a0";
static const char* PLUTUS_V1_SCRIPT_SET_CBOR  = "d90102845908955908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc00800800415908955908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc00800800415908955908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc00800800415908955908920100003233223232323232332232323232323232323232332232323232322223232533532323232325335001101d13357389211e77726f6e67207573616765206f66207265666572656e636520696e7075740001c3232533500221533500221333573466e1c00800408007c407854cd4004840784078d40900114cd4c8d400488888888888802d40044c08526221533500115333533550222350012222002350022200115024213355023320015021001232153353235001222222222222300e00250052133550253200150233355025200100115026320013550272253350011502722135002225335333573466e3c00801c0940904d40b00044c01800c884c09526135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c0cd5ce01901a01709aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901819ab9c03203402e135573ca00226ea8004d5d09aba2500223263202c33573805c06005426aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901419ab9c02a02c026135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860226ae84d5d1280211931900d19ab9c01c01e018375a00a6666ae68cdc39aab9d375400a9000100e11931900c19ab9c01a01c016101b132632017335738921035054350001b135573ca00226ea800448c88c008dd6000990009aa80d911999aab9f0012500a233500930043574200460066ae880080608c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00b00c00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500f014357426ae8940088c98c8064cd5ce00d80e80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007407c06406005c4d55cea80089baa00135742a00466a016eb8d5d09aba2500223263201533573802e03202626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a010466a00e66442466002006004600c6aae754008c014d55cf280118021aba200301613574200222440042442446600200800624464646666ae68cdc3a800a400046a02e600a6ae84d55cf280191999ab9a3370ea00490011280b91931900819ab9c01201400e00d135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01201400e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00e01000a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00600700409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a80b80880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700380400280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801601a00e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7003003802001c0184d55cea80089baa0012323333573466e1d40052002200623333573466e1d40092000200623263200633573801001400800626aae74dd5000a4c244004244002921035054310012333333357480024a00c4a00c4a00c46a00e6eb400894018008480044488c0080049400848488c00800c4488004448c8c00400488cc00cc0080080041";
static const char* PLUTUS_V2_SCRIPT_SET_CBOR  = "";
static const char* PLUTUS_V3_SCRIPT_SET_CBOR  = "";
static const char* PLUTUS_DATA_SET_CBOR       = "d90102849f01029f0102030405ff9f0102030405ff05ff9f01029f0102030405ff9f0102030405ff05ff9f01029f0102030405ff9f0102030405ff05ff9f01029f0102030405ff9f0102030405ff05ff";
static const char* REDEEMER_LIST_CBOR         = "a482000082d8799f0102030405ff821821182c82010182d8799f0102030405ff821821182c82030382d8799f0102030405ff821821182c82040482d8799f0102030405ff821821182c";

/* STATIC FUNCTIONS **********************************************************/

/**
 * Creates a new default instance of the witness_set.
 * @return A new instance of the witness_set.
 */
static cardano_witness_set_t*
new_default_witness_set()
{
  cardano_witness_set_t* witness_set = NULL;
  cardano_cbor_reader_t* reader      = cardano_cbor_reader_from_hex(CONWAY_CBOR_WITH_SETS, strlen(CONWAY_CBOR_WITH_SETS));
  cardano_error_t        result      = cardano_witness_set_from_cbor(reader, &witness_set);

  EXPECT_THAT(result, CARDANO_SUCCESS);

  cardano_cbor_reader_unref(&reader);

  cardano_witness_set_clear_cbor_cache(witness_set);

  return witness_set;
};

/* UNIT TESTS ****************************************************************/

TEST(cardano_witness_set_ref, increasesTheReferenceCount)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_witness_set_ref(witness_set);

  // Assert
  EXPECT_THAT(witness_set, testing::Not((cardano_witness_set_t*)nullptr));
  EXPECT_EQ(cardano_witness_set_refcount(witness_set), 2);

  // Cleanup - We need to unref twice since one reference was added.
  cardano_witness_set_unref(&witness_set);
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_ref, doesntCrashIfGivenANullPtr)
{
  // Act
  cardano_witness_set_ref(nullptr);
}

TEST(cardano_witness_set_unref, doesntCrashIfGivenAPtrToANullPtr)
{
  // Arrange
  cardano_witness_set_t* witness_set = nullptr;

  // Act
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_unref, doesntCrashIfGivenANullPtr)
{
  // Act
  cardano_witness_set_unref((cardano_witness_set_t**)nullptr);
}

TEST(cardano_witness_set_unref, decreasesTheReferenceCount)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_witness_set_ref(witness_set);
  size_t ref_count = cardano_witness_set_refcount(witness_set);

  cardano_witness_set_unref(&witness_set);
  size_t updated_ref_count = cardano_witness_set_refcount(witness_set);

  // Assert
  EXPECT_EQ(ref_count, 2);
  EXPECT_EQ(updated_ref_count, 1);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_unref, freesTheObjectIfReferenceReachesZero)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_witness_set_ref(witness_set);
  size_t ref_count = cardano_witness_set_refcount(witness_set);

  cardano_witness_set_unref(&witness_set);
  size_t updated_ref_count = cardano_witness_set_refcount(witness_set);

  cardano_witness_set_unref(&witness_set);

  // Assert
  EXPECT_EQ(ref_count, 2);
  EXPECT_EQ(updated_ref_count, 1);
  EXPECT_EQ(witness_set, (cardano_witness_set_t*)nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_refcount, returnsZeroIfGivenANullPtr)
{
  // Act
  size_t ref_count = cardano_witness_set_refcount(nullptr);

  // Assert
  EXPECT_EQ(ref_count, 0);
}

TEST(cardano_witness_set_set_last_error, doesNothingWhenObjectIsNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = nullptr;
  const char*            message     = "This is a test message";

  // Act
  cardano_witness_set_set_last_error(witness_set, message);

  // Assert
  EXPECT_STREQ(cardano_witness_set_get_last_error(witness_set), "Object is NULL.");
}

TEST(cardano_witness_set_set_last_error, doesNothingWhenWhenMessageIsNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  const char* message = nullptr;

  // Act
  cardano_witness_set_set_last_error(witness_set, message);

  // Assert
  EXPECT_STREQ(cardano_witness_set_get_last_error(witness_set), "");

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_from_cbor, returnsErrorIfReaderIsNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_from_cbor(nullptr, &witness_set);

  // Assert
  ASSERT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_from_cbor, returnsErrorIfWitnessSetIsNull)
{
  // Arrange
  cardano_cbor_reader_t* reader = cardano_cbor_reader_from_hex(CBOR, strlen(CBOR));

  // Act
  cardano_error_t result = cardano_witness_set_from_cbor(reader, nullptr);

  // Assert
  ASSERT_EQ(result, CARDANO_POINTER_IS_NULL);

  // Cleanup
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_to_cbor, canSerialize)
{
  // Arrange
  cardano_cbor_writer_t* writer = cardano_cbor_writer_new();
  cardano_witness_set_t* cert   = new_default_witness_set();
  EXPECT_NE(cert, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_to_cbor(cert, writer);

  // Assert
  ASSERT_EQ(result, CARDANO_SUCCESS);

  size_t hex_size = cardano_cbor_writer_get_hex_size(writer);
  char*  hex      = (char*)malloc(hex_size);

  ASSERT_EQ(cardano_cbor_writer_encode_hex(writer, hex, hex_size), CARDANO_SUCCESS);

  EXPECT_STREQ(hex, CONWAY_CBOR_WITH_SETS);

  // Cleanup
  cardano_witness_set_unref(&cert);
  cardano_cbor_writer_unref(&writer);
  free(hex);
}

TEST(cardano_witness_set_to_cbor, returnsErrorIfWitnessSetIsNull)
{
  // Arrange
  cardano_cbor_writer_t* writer = cardano_cbor_writer_new();

  // Act
  cardano_error_t result = cardano_witness_set_to_cbor(nullptr, writer);

  // Assert
  ASSERT_EQ(result, CARDANO_POINTER_IS_NULL);

  // Cleanup
  cardano_cbor_writer_unref(&writer);
}

TEST(cardano_witness_set_to_cbor, returnsErrorIfWriterIsNull)
{
  // Act
  cardano_error_t result = cardano_witness_set_to_cbor((cardano_witness_set_t*)"", nullptr);

  // Assert
  ASSERT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_new, canCreateNewInstance)
{
  // Act
  cardano_witness_set_t* witness_set = NULL;

  EXPECT_THAT(cardano_witness_set_new(&witness_set), CARDANO_SUCCESS);

  // Assert
  cardano_cbor_writer_t* writer = cardano_cbor_writer_new();
  EXPECT_THAT(cardano_witness_set_to_cbor(witness_set, writer), CARDANO_SUCCESS);

  size_t hex_size = cardano_cbor_writer_get_hex_size(writer);
  char*  hex      = (char*)malloc(hex_size);

  ASSERT_EQ(cardano_cbor_writer_encode_hex(writer, hex, hex_size), CARDANO_SUCCESS);

  EXPECT_STREQ(hex, "a0");

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_cbor_writer_unref(&writer);
  free(hex);
}

TEST(cardano_witness_set_new, returnsErroIfWitnessSetIsNull)
{
  // Act
  cardano_error_t result = cardano_witness_set_new(nullptr);

  // Assert
  ASSERT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_new, returnsErrorIfMemoryAllocationFails)
{
  // Arrange
  cardano_witness_set_t* witness_set = NULL;

  // Act
  reset_allocators_run_count();
  cardano_set_allocators(fail_right_away_malloc, realloc, free);

  cardano_error_t result = cardano_witness_set_new(&witness_set);

  ASSERT_EQ(result, CARDANO_MEMORY_ALLOCATION_FAILED);

  // Cleanup
  cardano_set_allocators(malloc, realloc, free);
}

TEST(cardano_witness_set_from_cbor, returnsErrorIfMemoryAllocationFails)
{
  // Arrange
  cardano_witness_set_t* witness_set = NULL;
  cardano_cbor_reader_t* reader      = cardano_cbor_reader_from_hex(CONWAY_CBOR_WITH_SETS, strlen(CONWAY_CBOR_WITH_SETS));

  // Act
  reset_allocators_run_count();
  cardano_set_allocators(fail_right_away_malloc, realloc, free);

  cardano_error_t result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_MEMORY_ALLOCATION_FAILED);

  reset_allocators_run_count();
  cardano_set_allocators(fail_after_one_malloc, realloc, free);

  result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_MEMORY_ALLOCATION_FAILED);

  reset_allocators_run_count();
  cardano_set_allocators(fail_after_two_malloc, realloc, free);

  result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_MEMORY_ALLOCATION_FAILED);

  reset_allocators_run_count();
  cardano_set_allocators(fail_after_three_malloc, realloc, free);

  result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_MEMORY_ALLOCATION_FAILED);

  reset_allocators_run_count();
  cardano_set_allocators(fail_after_four_malloc, realloc, free);

  result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_ERROR_DECODING);

  reset_allocators_run_count();
  cardano_set_allocators(fail_after_five_malloc, realloc, free);

  result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_ERROR_DECODING);

  reset_allocators_run_count();
  cardano_set_allocators(fail_after_six_malloc, realloc, free);

  result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_ERROR_DECODING);

  reset_allocators_run_count();
  cardano_set_allocators(fail_after_seventh_malloc, realloc, free);

  result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_ERROR_DECODING);

  // Cleanup
  cardano_cbor_reader_unref(&reader);
  cardano_set_allocators(malloc, realloc, free);
}

TEST(cardano_witness_set_from_cbor, returnsErrorIfInvalidCbor)
{
  // Arrange
  cardano_witness_set_t* witness_set = NULL;
  const char*            cbor        = "a319d90102848258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001020058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001021058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001022058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001023050184a400583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a028201d81849d8799f0102030405ff03d8185182014e4d01000033222220051200120011a300583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a02820058200000000000000000000000000000000000000000000000000000000000000000a300583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a028201d81849d8799f0102030405ffa2005826412813b99a80cfb4024374bd0f502959485aa56e0648564ff805f2e51b8cd9819561bddc6614011a02faf080021864";
  cardano_cbor_reader_t* reader      = cardano_cbor_reader_from_hex(cbor, strlen(cbor));

  // Act
  cardano_error_t result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_ERROR_INVALID_CBOR_MAP_KEY);

  // Cleanup
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_from_cbor, returnsErrorIfInvalidCbor2)
{
  // Arrange
  cardano_witness_set_t* witness_set = NULL;
  const char*            cbor        = "a3efd90102848258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001020058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001021058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001022058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001023050184a400583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a028201d81849d8799f0102030405ff03d8185182014e4d01000033222220051200120011a300583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a02820058200000000000000000000000000000000000000000000000000000000000000000a300583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a028201d81849d8799f0102030405ffa2005826412813b99a80cfb4024374bd0f502959485aa56e0648564ff805f2e51b8cd9819561bddc6614011a02faf080021864";
  cardano_cbor_reader_t* reader      = cardano_cbor_reader_from_hex(cbor, strlen(cbor));

  // Act
  cardano_error_t result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_ERROR_DECODING);

  // Cleanup
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_from_cbor, returnsErrorIfInvalidCbor3)
{
  // Arrange
  cardano_witness_set_t* witness_set = NULL;
  const char*            cbor        = "83efd90102848258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001020058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001021058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001022058258200102030405060708090a0b0c0d0e0f0e0d0c0b0a090807060504030201001023050184a400583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a028201d81849d8799f0102030405ff03d8185182014e4d01000033222220051200120011a300583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a02820058200000000000000000000000000000000000000000000000000000000000000000a300583900537ba48a023f0a3c65e54977ffc2d78c143fb418ef6db058e006d78a7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa801821a000f4240a2581c00000000000000000000000000000000000000000000000000000000a3443031323218644433343536186344404142420a581c11111111111111111111111111111111111111111111111111111111a3443031323218644433343536186344404142420a028201d81849d8799f0102030405ffa2005826412813b99a80cfb4024374bd0f502959485aa56e0648564ff805f2e51b8cd9819561bddc6614011a02faf080021864";
  cardano_cbor_reader_t* reader      = cardano_cbor_reader_from_hex(cbor, strlen(cbor));

  // Act
  cardano_error_t result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_ERROR_DECODING);

  // Cleanup
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_to_cbor, preserveOriginalCborIfEncoding)
{
  // Arrange
  cardano_witness_set_t* witness_set = NULL;
  cardano_cbor_reader_t* reader      = cardano_cbor_reader_from_hex(CONWAY_CBOR, strlen(CONWAY_CBOR));

  // Act
  cardano_error_t result = cardano_witness_set_from_cbor(reader, &witness_set);

  ASSERT_EQ(result, CARDANO_SUCCESS);

  cardano_cbor_writer_t* writer = cardano_cbor_writer_new();
  EXPECT_THAT(cardano_witness_set_to_cbor(witness_set, writer), CARDANO_SUCCESS);

  size_t hex_size = cardano_cbor_writer_get_hex_size(writer);
  char*  hex      = (char*)malloc(hex_size);

  ASSERT_EQ(cardano_cbor_writer_encode_hex(writer, hex, hex_size), CARDANO_SUCCESS);

  // Assert
  EXPECT_STREQ(hex, CONWAY_CBOR);

  // Cleanup
  cardano_cbor_reader_unref(&reader);
  cardano_witness_set_unref(&witness_set);
  cardano_cbor_writer_unref(&writer);
  free(hex);
}

TEST(cardano_witness_set_get_vkeys, returnsNullIfWitnessSetIsNull)
{
  // Act
  cardano_vkey_witness_set_t* vkeys = cardano_witness_set_get_vkeys(nullptr);

  // Assert
  EXPECT_EQ(vkeys, nullptr);
}

TEST(cardano_witness_set_get_vkeys, returnsVkeys)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_vkey_witness_set_t* vkeys = cardano_witness_set_get_vkeys(witness_set);

  // Assert
  EXPECT_NE(vkeys, nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_vkey_witness_set_unref(&vkeys);
}

TEST(cardano_witness_set_set_vkeys, canSetVkeysNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_set_vkeys(witness_set, nullptr);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_set_vkeys, returnsErrorIfWitnessSetNull)
{
  // Arrange
  cardano_vkey_witness_set_t* vkeys = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_set_vkeys(nullptr, vkeys);

  // Assert
  EXPECT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_set_vkeys, canSetVkeys)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  cardano_vkey_witness_set_t* vkeys  = NULL;
  cardano_cbor_reader_t*      reader = cardano_cbor_reader_from_hex(VKEY_WITNESS_SET_CBOR, strlen(VKEY_WITNESS_SET_CBOR));

  EXPECT_THAT(cardano_vkey_witness_set_from_cbor(reader, &vkeys), CARDANO_SUCCESS);

  // Act
  cardano_error_t result = cardano_witness_set_set_vkeys(witness_set, vkeys);

  cardano_vkey_witness_set_t* vkeys_from_witness_set = cardano_witness_set_get_vkeys(witness_set);

  EXPECT_EQ(vkeys_from_witness_set, vkeys);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_vkey_witness_set_unref(&vkeys);
  cardano_vkey_witness_set_unref(&vkeys_from_witness_set);
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_get_bootstrap, returnsNullIfWitnessSetIsNull)
{
  // Act
  cardano_bootstrap_witness_set_t* bootstrap = cardano_witness_set_get_bootstrap(nullptr);

  // Assert
  EXPECT_EQ(bootstrap, nullptr);
}

TEST(cardano_witness_set_get_bootstrap, returnsBootstrap)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_bootstrap_witness_set_t* bootstrap = cardano_witness_set_get_bootstrap(witness_set);

  // Assert
  EXPECT_NE(bootstrap, nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_bootstrap_witness_set_unref(&bootstrap);
}

TEST(cardano_witness_set_set_bootstrap, canSetBootstrapNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_set_bootstrap(witness_set, nullptr);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_set_bootstrap, returnsErrorIfWitnessSetNull)
{
  // Arrange
  cardano_bootstrap_witness_set_t* bootstrap = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_set_bootstrap(nullptr, bootstrap);

  // Assert
  EXPECT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_set_bootstrap, canSetBootstrap)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  cardano_bootstrap_witness_set_t* bootstrap = NULL;
  cardano_cbor_reader_t*           reader    = cardano_cbor_reader_from_hex(BOOTSTRAP_WITNESS_SET_CBOR, strlen(BOOTSTRAP_WITNESS_SET_CBOR));

  EXPECT_THAT(cardano_bootstrap_witness_set_from_cbor(reader, &bootstrap), CARDANO_SUCCESS);

  // Act
  cardano_error_t result = cardano_witness_set_set_bootstrap(witness_set, bootstrap);

  cardano_bootstrap_witness_set_t* bootstrap_from_witness_set = cardano_witness_set_get_bootstrap(witness_set);

  EXPECT_EQ(bootstrap_from_witness_set, bootstrap);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_bootstrap_witness_set_unref(&bootstrap);
  cardano_bootstrap_witness_set_unref(&bootstrap_from_witness_set);
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_get_native_scripts, returnsNullIfWitnessSetIsNull)
{
  // Act
  cardano_native_script_set_t* native_scripts = cardano_witness_set_get_native_scripts(nullptr);

  // Assert
  EXPECT_EQ(native_scripts, nullptr);
}

TEST(cardano_witness_set_get_native_scripts, returnsNativeScripts)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_native_script_set_t* native_scripts = cardano_witness_set_get_native_scripts(witness_set);

  // Assert
  EXPECT_NE(native_scripts, nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_native_script_set_unref(&native_scripts);
}

TEST(cardano_witness_set_set_native_scripts, canSetNativeScriptsNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_set_native_scripts(witness_set, nullptr);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_set_native_scripts, returnsErrorIfWitnessSetNull)
{
  // Arrange
  cardano_native_script_set_t* native_scripts = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_set_native_scripts(nullptr, native_scripts);

  // Assert
  EXPECT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_set_native_scripts, canSetNativeScripts)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  cardano_native_script_set_t* native_scripts = NULL;
  cardano_cbor_reader_t*       reader         = cardano_cbor_reader_from_hex(NATIVE_SCRIPT_SET_CBOR, strlen(NATIVE_SCRIPT_SET_CBOR));

  EXPECT_THAT(cardano_native_script_set_from_cbor(reader, &native_scripts), CARDANO_SUCCESS);

  // Act
  cardano_error_t result = cardano_witness_set_set_native_scripts(witness_set, native_scripts);

  cardano_native_script_set_t* native_scripts_from_witness_set = cardano_witness_set_get_native_scripts(witness_set);

  EXPECT_EQ(native_scripts_from_witness_set, native_scripts);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_native_script_set_unref(&native_scripts);
  cardano_native_script_set_unref(&native_scripts_from_witness_set);
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_get_plutus_v1_scripts, returnsNullIfWitnessSetIsNull)
{
  // Act
  cardano_plutus_v1_script_set_t* plutus_v1_scripts = cardano_witness_set_get_plutus_v1_scripts(nullptr);

  // Assert
  EXPECT_EQ(plutus_v1_scripts, nullptr);
}

TEST(cardano_witness_set_get_plutus_v1_scripts, returnsPlutusV1Scripts)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_plutus_v1_script_set_t* plutus_v1_scripts = cardano_witness_set_get_plutus_v1_scripts(witness_set);

  // Assert
  EXPECT_NE(plutus_v1_scripts, nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_plutus_v1_script_set_unref(&plutus_v1_scripts);
}

TEST(cardano_witness_set_set_plutus_v1_scripts, canSetPlutusV1ScriptsNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v1_scripts(witness_set, nullptr);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_set_plutus_v1_scripts, returnsErrorIfWitnessSetNull)
{
  // Arrange
  cardano_plutus_v1_script_set_t* plutus_v1_scripts = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v1_scripts(nullptr, plutus_v1_scripts);

  // Assert
  EXPECT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_set_plutus_v1_scripts, canSetPlutusV1Scripts)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  cardano_plutus_v1_script_set_t* plutus_v1_scripts = NULL;
  cardano_cbor_reader_t*          reader            = cardano_cbor_reader_from_hex(PLUTUS_V1_SCRIPT_SET_CBOR, strlen(PLUTUS_V1_SCRIPT_SET_CBOR));

  EXPECT_THAT(cardano_plutus_v1_script_set_from_cbor(reader, &plutus_v1_scripts), CARDANO_SUCCESS);

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v1_scripts(witness_set, plutus_v1_scripts);

  cardano_plutus_v1_script_set_t* plutus_v1_scripts_from_witness_set = cardano_witness_set_get_plutus_v1_scripts(witness_set);

  EXPECT_EQ(plutus_v1_scripts_from_witness_set, plutus_v1_scripts);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_plutus_v1_script_set_unref(&plutus_v1_scripts);
  cardano_plutus_v1_script_set_unref(&plutus_v1_scripts_from_witness_set);
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_get_plutus_v2_scripts, returnsNullIfWitnessSetIsNull)
{
  // Act
  cardano_plutus_v2_script_set_t* plutus_v2_scripts = cardano_witness_set_get_plutus_v2_scripts(nullptr);

  // Assert
  EXPECT_EQ(plutus_v2_scripts, nullptr);
}

TEST(cardano_witness_set_get_plutus_v2_scripts, returnsPlutusV2Scripts)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_plutus_v2_script_set_t* plutus_v2_scripts = cardano_witness_set_get_plutus_v2_scripts(witness_set);

  // Assert
  EXPECT_NE(plutus_v2_scripts, nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_plutus_v2_script_set_unref(&plutus_v2_scripts);
}

TEST(cardano_witness_set_set_plutus_v2_scripts, canSetPlutusV2ScriptsNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v2_scripts(witness_set, nullptr);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_set_plutus_v2_scripts, returnsErrorIfWitnessSetNull)
{
  // Arrange
  cardano_plutus_v2_script_set_t* plutus_v2_scripts = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v2_scripts(nullptr, plutus_v2_scripts);

  // Assert
  EXPECT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_set_plutus_v2_scripts, canSetPlutusV2Scripts)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  cardano_plutus_v2_script_set_t* plutus_v2_scripts = NULL;
  cardano_cbor_reader_t*          reader            = cardano_cbor_reader_from_hex(PLUTUS_V2_SCRIPT_SET_CBOR, strlen(PLUTUS_V2_SCRIPT_SET_CBOR));

  EXPECT_THAT(cardano_plutus_v2_script_set_from_cbor(reader, &plutus_v2_scripts), CARDANO_SUCCESS);

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v2_scripts(witness_set, plutus_v2_scripts);

  cardano_plutus_v2_script_set_t* plutus_v2_scripts_from_witness_set = cardano_witness_set_get_plutus_v2_scripts(witness_set);

  EXPECT_EQ(plutus_v2_scripts_from_witness_set, plutus_v2_scripts);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_plutus_v2_script_set_unref(&plutus_v2_scripts);
  cardano_plutus_v2_script_set_unref(&plutus_v2_scripts_from_witness_set);
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_get_plutus_v3_scripts, returnsNullIfWitnessSetIsNull)
{
  // Act
  cardano_plutus_v3_script_set_t* plutus_v3_scripts = cardano_witness_set_get_plutus_v3_scripts(nullptr);

  // Assert
  EXPECT_EQ(plutus_v3_scripts, nullptr);
}

TEST(cardano_witness_set_get_plutus_v3_scripts, returnsPlutusV3Scripts)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_plutus_v3_script_set_t* plutus_v3_scripts = cardano_witness_set_get_plutus_v3_scripts(witness_set);

  // Assert
  EXPECT_NE(plutus_v3_scripts, nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_plutus_v3_script_set_unref(&plutus_v3_scripts);
}

TEST(cardano_witness_set_set_plutus_v3_scripts, canSetPlutusV3ScriptsNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v3_scripts(witness_set, nullptr);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_set_plutus_v3_scripts, returnsErrorIfWitnessSetNull)
{
  // Arrange
  cardano_plutus_v3_script_set_t* plutus_v3_scripts = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v3_scripts(nullptr, plutus_v3_scripts);

  // Assert
  EXPECT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_set_plutus_v3_scripts, canSetPlutusV3Scripts)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  cardano_plutus_v3_script_set_t* plutus_v3_scripts = NULL;
  cardano_cbor_reader_t*          reader            = cardano_cbor_reader_from_hex(PLUTUS_V3_SCRIPT_SET_CBOR, strlen(PLUTUS_V3_SCRIPT_SET_CBOR));

  EXPECT_THAT(cardano_plutus_v3_script_set_from_cbor(reader, &plutus_v3_scripts), CARDANO_SUCCESS);

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_v3_scripts(witness_set, plutus_v3_scripts);

  cardano_plutus_v3_script_set_t* plutus_v3_scripts_from_witness_set = cardano_witness_set_get_plutus_v3_scripts(witness_set);

  EXPECT_EQ(plutus_v3_scripts_from_witness_set, plutus_v3_scripts);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_plutus_v3_script_set_unref(&plutus_v3_scripts);
  cardano_plutus_v3_script_set_unref(&plutus_v3_scripts_from_witness_set);
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_get_plutus_data, returnsNullIfWitnessSetIsNull)
{
  // Act
  cardano_plutus_data_set_t* plutus_data = cardano_witness_set_get_plutus_data(nullptr);

  // Assert
  EXPECT_EQ(plutus_data, nullptr);
}

TEST(cardano_witness_set_get_plutus_data, returnsPlutusData)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_plutus_data_set_t* plutus_data = cardano_witness_set_get_plutus_data(witness_set);

  // Assert
  EXPECT_NE(plutus_data, nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_plutus_data_set_unref(&plutus_data);
}

TEST(cardano_witness_set_set_plutus_data, canSetPlutusDataNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_data(witness_set, nullptr);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_set_plutus_data, returnsErrorIfWitnessSetNull)
{
  // Arrange
  cardano_plutus_data_set_t* plutus_data = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_data(nullptr, plutus_data);

  // Assert
  EXPECT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_set_plutus_data, canSetPlutusData)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  cardano_plutus_data_set_t* plutus_data = NULL;
  cardano_cbor_reader_t*     reader      = cardano_cbor_reader_from_hex(PLUTUS_DATA_SET_CBOR, strlen(PLUTUS_DATA_SET_CBOR));

  EXPECT_THAT(cardano_plutus_data_set_from_cbor(reader, &plutus_data), CARDANO_SUCCESS);

  // Act
  cardano_error_t result = cardano_witness_set_set_plutus_data(witness_set, plutus_data);

  cardano_plutus_data_set_t* plutus_data_from_witness_set = cardano_witness_set_get_plutus_data(witness_set);

  EXPECT_EQ(plutus_data_from_witness_set, plutus_data);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_plutus_data_set_unref(&plutus_data);
  cardano_plutus_data_set_unref(&plutus_data_from_witness_set);
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_get_redeemers, returnsNullIfWitnessSetIsNull)
{
  // Act
  cardano_redeemer_list_t* redeemers = cardano_witness_set_get_redeemers(nullptr);

  // Assert
  EXPECT_EQ(redeemers, nullptr);
}

TEST(cardano_witness_set_get_redeemers, returnsRedeemers)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_redeemer_list_t* redeemers = cardano_witness_set_get_redeemers(witness_set);

  // Assert
  EXPECT_NE(redeemers, nullptr);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_redeemer_list_unref(&redeemers);
}

TEST(cardano_witness_set_set_redeemers, canSetRedeemersNull)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  // Act
  cardano_error_t result = cardano_witness_set_set_redeemers(witness_set, nullptr);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
}

TEST(cardano_witness_set_set_redeemers, returnsErrorIfWitnessSetNull)
{
  // Arrange
  cardano_redeemer_list_t* redeemers = NULL;

  // Act
  cardano_error_t result = cardano_witness_set_set_redeemers(nullptr, redeemers);

  // Assert
  EXPECT_EQ(result, CARDANO_POINTER_IS_NULL);
}

TEST(cardano_witness_set_set_redeemers, canSetRedeemers)
{
  // Arrange
  cardano_witness_set_t* witness_set = new_default_witness_set();
  EXPECT_NE(witness_set, nullptr);

  cardano_redeemer_list_t* redeemers = NULL;
  cardano_cbor_reader_t*   reader    = cardano_cbor_reader_from_hex(REDEEMER_LIST_CBOR, strlen(REDEEMER_LIST_CBOR));

  EXPECT_THAT(cardano_redeemer_list_from_cbor(reader, &redeemers), CARDANO_SUCCESS);

  // Act
  cardano_error_t result = cardano_witness_set_set_redeemers(witness_set, redeemers);

  cardano_redeemer_list_t* redeemers_from_witness_set = cardano_witness_set_get_redeemers(witness_set);

  EXPECT_EQ(redeemers_from_witness_set, redeemers);

  // Assert
  EXPECT_EQ(result, CARDANO_SUCCESS);

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_redeemer_list_unref(&redeemers);
  cardano_redeemer_list_unref(&redeemers_from_witness_set);
  cardano_cbor_reader_unref(&reader);
}

TEST(cardano_witness_set_clear_cbor_cache, returnsErrorIfWitnessSetIsNull)
{
  // Act
  cardano_witness_set_clear_cbor_cache(nullptr);

  // Assert
  EXPECT_TRUE(true);
}

TEST(cardano_witness_set_clear_cbor_cache, clearsTheCache)
{
  // Arrange
  cardano_witness_set_t* witness_set = NULL;
  cardano_cbor_reader_t* reader      = cardano_cbor_reader_from_hex(CONWAY_CBOR, strlen(CONWAY_CBOR));

  EXPECT_THAT(cardano_witness_set_from_cbor(reader, &witness_set), CARDANO_SUCCESS);

  // Act
  // Encode to CBOR and compare
  cardano_cbor_writer_t* writer = cardano_cbor_writer_new();

  EXPECT_THAT(cardano_witness_set_to_cbor(witness_set, writer), CARDANO_SUCCESS);

  size_t cbor_size = cardano_cbor_writer_get_hex_size(writer);
  char*  cbor      = (char*)malloc(cbor_size);

  EXPECT_THAT(cardano_cbor_writer_encode_hex(writer, cbor, cbor_size), CARDANO_SUCCESS);
  EXPECT_STREQ(cbor, CONWAY_CBOR);

  // Clear the cache
  cardano_witness_set_clear_cbor_cache(witness_set);

  // Encode to CBOR and compare
  cardano_cbor_writer_t* writer2 = cardano_cbor_writer_new();

  EXPECT_THAT(cardano_witness_set_to_cbor(witness_set, writer2), CARDANO_SUCCESS);

  size_t cbor_size2 = cardano_cbor_writer_get_hex_size(writer2);
  char*  cbor2      = (char*)malloc(cbor_size2);

  EXPECT_THAT(cardano_cbor_writer_encode_hex(writer2, cbor2, cbor_size2), CARDANO_SUCCESS);

  EXPECT_STREQ(cbor2, "a700d90102838258204a352f53eb4311d552aa9e1c6f0125846a3b607011d691f0e774d893d940b8525840c4f13cc397a50193061ce899b3eda906ad1adf3f3d515b52248ea5aa142781cd9c2ccc52ac62b2e1b5226de890104ec530bda4c38a19b691946da9addb3213f5825820290c08454c58a8c7fad6351e65a652460bd4f80f485f1ccfc350ff6a4d5bd4de5840026f47bab2f24da9690746bdb0e55d53a5eef45a969e3dd2873a3e6bb8ef3316d9f80489bacfd2f543108e284a40847ae7ce33fa358fcfe439a37990ad3107e98258204d953d6a9d556da3f3e26622c725923130f5733d1a3c4013ef8c34d15a070fd75840f9218e5a569c5ace38b1bb81e1f1c0b2d7fea2fe7fb913fdd06d79906436103345347a81494b83f83bf43466b0cebdbbdcef15384f67c255e826c249336ce2c701d90102848204038205098202818200581c3542acb3a64d80c29302260d62c3b87a742ad14abf855ebc6733081e830300818200581cb5ae663aaea8e500157bdf4baafd6f5ba0ce5759f7cd4101fc132f5402d90102828458203d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820000000000000000000000000000000000000000000000000000000000000000041a08458203d4017c3e863895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c58406291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a5820ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41a003d9010284474601000022001047460100002200114746010000220012474601000022001304d90102833bffffffffffffffff3bffffffffffffffff3bffffffffffffffff05a482000082d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645182010082d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645182020082d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645182030082d8799f0102030405ff821b000086788ffc4e831b00015060e9e4645106d90102844746010000220010474601000022001147460100002200124746010000220013");

  // Cleanup
  cardano_witness_set_unref(&witness_set);
  cardano_cbor_reader_unref(&reader);
  cardano_cbor_writer_unref(&writer);
  cardano_cbor_writer_unref(&writer2);
  free(cbor);
  free(cbor2);
}