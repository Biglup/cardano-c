/**
 * \file script_data_hash.cpp
 *
 * \author angel.castillo
 * \date   Oct 13, 2024
 *
 * \section LICENSE
 *
 * Copyright 2024 Biglup Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* INCLUDES ******************************************************************/

#include <cardano/error.h>

#include <cardano/transaction_builder/script_data_hash.h>

#include <allocators.h>
#include <cardano/transaction/transaction.h>

#include <cardano/witness_set/redeemer.h>
#include <gmock/gmock.h>
#include <tests/allocators_helpers.h>

/* CONSTANTS *****************************************************************/

static const char* TX_CBOR       = "";
static const char* REDEEMER_CBOR = "840100d8799fff821a00cccbfa1b0000000249397d10";

// clang-format off
static const int64_t alonzoPlutusV1CostModel[] = {
  197209, 0, 1, 1, 396231, 621, 0, 1, 150000, 1000, 0, 1, 150000, 32, 2477736, 29175, 4, 29773, 100, 29773,
  100, 29773, 100, 29773, 100, 29773, 100, 29773, 100, 100, 100, 29773, 100, 150000, 32, 150000, 32, 150000,
  32, 150000, 1000, 0, 1, 150000, 32, 150000, 1000, 0, 8, 148000, 425507, 118, 0, 1, 1, 150000, 1000, 0, 8,
  150000, 112536, 247, 1, 150000, 10000, 1, 136542, 1326, 1, 1000, 150000, 1000, 1, 150000, 32, 150000, 32,
  150000, 32, 1, 1, 150000, 1, 150000, 4, 103599, 248, 1, 103599, 248, 1, 145276, 1366, 1, 179690, 497, 1,
  150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 150000, 32, 148000, 425507, 118, 0, 1, 1,
  61516, 11218, 0, 1, 150000, 32, 148000, 425507, 118, 0, 1, 1, 148000, 425507, 118, 0, 1, 1, 2477736,
  29175, 4, 0, 82363, 4, 150000, 5000, 0, 1, 150000, 32, 197209, 0, 1, 1, 150000, 32, 150000, 32, 150000, 32,
  150000, 32, 150000, 32, 150000, 32, 150000, 32, 3345831, 1, 1
};

static const int64_t localNetworkPlutusV2CostModel[] = {
  205665, 812, 1, 1, 1000, 571, 0, 1, 1000, 24177, 4, 1, 1000, 32, 117366, 10475, 4, 23000, 100, 23000, 100,
  23000, 100, 23000, 100, 23000, 100, 23000, 100, 100, 100, 23000, 100, 19537, 32, 175354, 32, 46417, 4,
  221973, 511, 0, 1, 89141, 32, 497525, 14068, 4, 2, 196500, 453240, 220, 0, 1, 1, 1000, 28662, 4, 2, 245000,
  216773, 62, 1, 1060367, 12586, 1, 208512, 421, 1, 187000, 1000, 52998, 1, 80436, 32, 43249, 32, 1000, 32,
  80556, 1, 57667, 4, 1000, 10, 197145, 156, 1, 197145, 156, 1, 204924, 473, 1, 208896, 511, 1, 52467, 32,
  64832, 32, 65493, 32, 22558, 32, 16563, 32, 76511, 32, 196500, 453240, 220, 0, 1, 1, 69522, 11687, 0, 1,
  60091, 32, 196500, 453240, 220, 0, 1, 1, 196500, 453240, 220, 0, 1, 1, 1159724, 392670, 0, 2, 806990,
  30482, 4, 1927926, 82523, 4, 265318, 0, 4, 0, 85931, 32, 205665, 812, 1, 1, 41182, 32, 212342, 32, 31220,
  32, 32696, 32, 43357, 32, 32247, 32, 38314, 32, 35892428, 10, 9462713, 1021, 10, 38887044, 32947, 10
};

static const int64_t plutusV1CostModel[] = {
  205665, 812, 1, 1, 1000, 571, 0, 1, 1000, 24177, 4, 1, 1000, 32, 117366, 10475, 4, 23000, 100, 23000, 100,
  23000, 100, 23000, 100, 23000, 100, 23000, 100, 100, 100, 23000, 100, 19537, 32, 175354, 32, 46417, 4,
  221973, 511, 0, 1, 89141, 32, 497525, 14068, 4, 2, 196500, 453240, 220, 0, 1, 1, 1000, 28662, 4, 2, 245000,
  216773, 62, 1, 1060367, 12586, 1, 208512, 421, 1, 187000, 1000, 52998, 1, 80436, 32, 43249, 32, 1000, 32,
  80556, 1, 57667, 4, 1000, 10, 197145, 156, 1, 197145, 156, 1, 204924, 473, 1, 208896, 511, 1, 52467, 32,
  64832, 32, 65493, 32, 22558, 32, 16563, 32, 76511, 32, 196500, 453240, 220, 0, 1, 1, 69522, 11687, 0, 1,
  60091, 32, 196500, 453240, 220, 0, 1, 1, 196500, 453240, 220, 0, 1, 1, 806990, 30482, 4, 1927926, 82523,
  4, 265318, 0, 4, 0, 85931, 32, 205665, 812, 1, 1, 41182, 32, 212342, 32, 31220, 32, 32696, 32, 43357, 32,
  32247, 32, 38314, 32, 57996947, 18975, 10
};

static const int64_t plutusV2CostModel[] = {
  205665, 812, 1, 1, 1000, 571, 0, 1, 1000, 24177, 4, 1, 1000, 32, 117366, 10475, 4, 23000, 100, 23000, 100,
  23000, 100, 23000, 100, 23000, 100, 23000, 100, 100, 100, 23000, 100, 19537, 32, 175354, 32, 46417, 4,
  221973, 511, 0, 1, 89141, 32, 497525, 14068, 4, 2, 196500, 453240, 220, 0, 1, 1, 1000, 28662, 4, 2, 245000,
  216773, 62, 1, 1060367, 12586, 1, 208512, 421, 1, 187000, 1000, 52998, 1, 80436, 32, 43249, 32, 1000, 32,
  80556, 1, 57667, 4, 1000, 10, 197145, 156, 1, 197145, 156, 1, 204924, 473, 1, 208896, 511, 1, 52467, 32,
  64832, 32, 65493, 32, 22558, 32, 16563, 32, 76511, 32, 196500, 453240, 220, 0, 1, 1, 69522, 11687, 0, 1,
  60091, 32, 196500, 453240, 220, 0, 1, 1, 196500, 453240, 220, 0, 1, 1, 1159724, 392670, 0, 2, 806990,
  30482, 4, 1927926, 82523, 4, 265318, 0, 4, 0, 85931, 32, 205665, 812, 1, 1, 41182, 32, 212342, 32, 31220,
  32, 32696, 32, 43357, 32, 32247, 32, 38314, 32, 35892428, 10, 57996947, 18975, 10, 38887044, 32947, 10
};

// clang-format on

/* STATIC FUNCTIONS **********************************************************/

/**
 * \brief Builds a cost model.
 *
 * \param costs The costs
 * \param size The cost size.
 * \param version The plutus language version.
 *
 * \return The cost model instance.
 */
static cardano_cost_model_t*
build_cost_model(const int64_t* costs, const size_t size, const cardano_plutus_language_version_t version)
{
  cardano_cost_model_t* cost_model = NULL;

  cardano_error_t result = cardano_cost_model_new(version, costs, size, &cost_model);

  EXPECT_EQ(result, CARDANO_SUCCESS);

  return cost_model;
}

/**
 * \brief Builds a tx from its CBOR representation.
 * \param cbor The CBOR representation of the tx.
 * \return A pointer to the tx.
 */
static cardano_transaction_t*
create_transaction(const char* cbor)
{
  cardano_cbor_reader_t* reader = cardano_cbor_reader_from_hex(cbor, strlen(cbor));

  cardano_transaction_t* tx = NULL;

  cardano_error_t result = cardano_transaction_from_cbor(reader, &tx);

  cardano_cbor_reader_unref(&reader);

  EXPECT_EQ(result, CARDANO_SUCCESS);

  return tx;
}

/**
 * \brief Builds a redeemer from its CBOR representation.
 * \param cbor The CBOR representation of the redeemer.
 * \return A pointer to the redeemer.
 */
static cardano_redeemer_t*
create_redeemer(const char* cbor)
{
  cardano_cbor_reader_t* reader = cardano_cbor_reader_from_hex(cbor, strlen(cbor));

  cardano_redeemer_t* redeemer = NULL;

  cardano_error_t result = cardano_redeemer_from_cbor(reader, &redeemer);

  cardano_cbor_reader_unref(&reader);

  EXPECT_EQ(result, CARDANO_SUCCESS);

  return redeemer;
}

/* UNIT TESTS ****************************************************************/

TEST(cardano_compute_script_data_hash, canComputeHashForScriptV1)
{
  cardano_transaction_t* tx             = create_transaction(TX_CBOR);
  cardano_cost_model_t*  plutusV1_costs = build_cost_model(&alonzoPlutusV1CostModel[0], sizeof(alonzoPlutusV1CostModel) / sizeof(alonzoPlutusV1CostModel[0]), CARDANO_PLUTUS_LANGUAGE_VERSION_V1);
  cardano_costmdls_t*    costmdls       = NULL;

  cardano_error_t result = cardano_costmdls_new(&costmdls);

  EXPECT_EQ(result, CARDANO_SUCCESS);

  result = cardano_costmdls_insert(costmdls, plutusV1_costs);

  EXPECT_EQ(result, CARDANO_SUCCESS);

  cardano_transaction_body_t* body         = cardano_transaction_get_body(tx);
  cardano_witness_set_t*      witness_set  = cardano_transaction_get_witness_set(tx);
  cardano_redeemer_list_t*    redeemers    = cardano_witness_set_get_redeemers(witness_set);
  cardano_plutus_data_set_t*  datums       = cardano_witness_set_get_plutus_data(witness_set);
  cardano_blake2b_hash_t*     tx_data_hash = cardano_transaction_body_get_script_data_hash(body);

  cardano_blake2b_hash_t* data_hash = NULL;
  result                            = cardano_compute_script_data_hash(costmdls, redeemers, datums, &data_hash);

  EXPECT_EQ(result, CARDANO_SUCCESS);
  EXPECT_TRUE(cardano_blake2b_hash_equals(data_hash, tx_data_hash));

  cardano_transaction_unref(&tx);
  cardano_costmdls_unref(&costmdls);
  cardano_cost_model_unref(&plutusV1_costs);
  cardano_blake2b_hash_unref(&data_hash);
  cardano_blake2b_hash_unref(&tx_data_hash);
  cardano_witness_set_unref(&witness_set);
  cardano_transaction_body_unref(&body);
  cardano_redeemer_list_unref(&redeemers);
  cardano_plutus_data_set_unref(&datums);
}

TEST(cardano_compute_script_data_hash, canComputeHashWithOnlyDatum)
{
  cardano_cost_model_t*      plutusV1_costs = build_cost_model(&plutusV1CostModel[0], sizeof(plutusV1CostModel) / sizeof(plutusV1CostModel[0]), CARDANO_PLUTUS_LANGUAGE_VERSION_V1);
  cardano_cost_model_t*      plutusV2_costs = build_cost_model(&plutusV2CostModel[0], sizeof(plutusV2CostModel) / sizeof(plutusV2CostModel[0]), CARDANO_PLUTUS_LANGUAGE_VERSION_V2);
  cardano_costmdls_t*        costmdls       = NULL;
  cardano_plutus_data_t*     data           = NULL;
  cardano_plutus_data_set_t* datums         = NULL;

  EXPECT_EQ(cardano_costmdls_new(&costmdls), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_costmdls_insert(costmdls, plutusV1_costs), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_costmdls_insert(costmdls, plutusV2_costs), CARDANO_SUCCESS);

  EXPECT_EQ(cardano_plutus_data_new_integer_from_string("1234567890123456789012345678901234567890", strlen("1234567890123456789012345678901234567890"), 10, &data), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_plutus_data_set_new(&datums), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_plutus_data_set_add(datums, data), CARDANO_SUCCESS);

  cardano_blake2b_hash_t* data_hash = NULL;
  EXPECT_EQ(cardano_compute_script_data_hash(costmdls, NULL, datums, &data_hash), CARDANO_SUCCESS);

  const size_t hash_size = cardano_blake2b_hash_get_hex_size(data_hash);
  char*        hash      = (char*)malloc(hash_size);

  EXPECT_EQ(cardano_blake2b_hash_to_hex(data_hash, hash, hash_size), CARDANO_SUCCESS);

  EXPECT_STREQ(hash, "bf148471e341d2a0d6ae9ccec8f7c75b5f155348b8af39c9fb86b95575ac9c3c");

  free(hash);
  cardano_plutus_data_unref(&data);
  cardano_plutus_data_set_unref(&datums);
  cardano_costmdls_unref(&costmdls);
  cardano_cost_model_unref(&plutusV1_costs);
  cardano_cost_model_unref(&plutusV2_costs);
  cardano_blake2b_hash_unref(&data_hash);
}

TEST(cardano_compute_script_data_hash, canComputeHashWithOnlyRedeemer)
{
  cardano_cost_model_t*    plutusV2_costs = build_cost_model(&localNetworkPlutusV2CostModel[0], sizeof(localNetworkPlutusV2CostModel) / sizeof(localNetworkPlutusV2CostModel[0]), CARDANO_PLUTUS_LANGUAGE_VERSION_V2);
  cardano_costmdls_t*      costmdls       = NULL;
  cardano_redeemer_t*      redeemer       = create_redeemer(REDEEMER_CBOR);
  cardano_redeemer_list_t* redeemers      = NULL;

  EXPECT_EQ(cardano_costmdls_new(&costmdls), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_costmdls_insert(costmdls, plutusV2_costs), CARDANO_SUCCESS);

  EXPECT_EQ(cardano_redeemer_list_new(&redeemers), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_redeemer_list_add(redeemers, redeemer), CARDANO_SUCCESS);

  cardano_blake2b_hash_t* data_hash = NULL;
  EXPECT_EQ(cardano_compute_script_data_hash(costmdls, redeemers, NULL, &data_hash), CARDANO_SUCCESS);

  const size_t hash_size = cardano_blake2b_hash_get_hex_size(data_hash);
  char*        hash      = (char*)malloc(hash_size);

  EXPECT_EQ(cardano_blake2b_hash_to_hex(data_hash, hash, hash_size), CARDANO_SUCCESS);

  EXPECT_STREQ(hash, "264e4a2278effedffbe6df557bbe046921a2910ed3d6e37891413ac79d368c4e");

  free(hash);
  cardano_redeemer_unref(&redeemer);
  cardano_redeemer_list_unref(&redeemers);
  cardano_costmdls_unref(&costmdls);
  cardano_cost_model_unref(&plutusV2_costs);
  cardano_blake2b_hash_unref(&data_hash);
}

TEST(cardano_compute_script_data_hash, returnsNullIfBothDatumAndRedeemersAreNull)
{
  cardano_cost_model_t*   plutusV2_costs = build_cost_model(&localNetworkPlutusV2CostModel[0], sizeof(localNetworkPlutusV2CostModel) / sizeof(localNetworkPlutusV2CostModel[0]), CARDANO_PLUTUS_LANGUAGE_VERSION_V2);
  cardano_costmdls_t*     costmdls       = NULL;
  cardano_blake2b_hash_t* data_hash      = NULL;

  EXPECT_EQ(cardano_costmdls_new(&costmdls), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_costmdls_insert(costmdls, plutusV2_costs), CARDANO_SUCCESS);

  EXPECT_EQ(cardano_compute_script_data_hash(costmdls, NULL, NULL, &data_hash), CARDANO_SUCCESS);
  EXPECT_EQ(data_hash, nullptr);

  cardano_costmdls_unref(&costmdls);
  cardano_cost_model_unref(&plutusV2_costs);
}

TEST(cardano_compute_script_data_hash, returnsNullIfCostMdlsAreEmpty)
{
  cardano_redeemer_t*      redeemer  = create_redeemer(REDEEMER_CBOR);
  cardano_redeemer_list_t* redeemers = NULL;
  cardano_blake2b_hash_t*  data_hash = NULL;
  cardano_costmdls_t*      costmdls  = NULL;

  EXPECT_EQ(cardano_costmdls_new(&costmdls), CARDANO_SUCCESS);

  EXPECT_EQ(cardano_redeemer_list_new(&redeemers), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_redeemer_list_add(redeemers, redeemer), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_compute_script_data_hash(costmdls, redeemers, NULL, &data_hash), CARDANO_SUCCESS);
  EXPECT_EQ(data_hash, nullptr);

  cardano_redeemer_unref(&redeemer);
  cardano_redeemer_list_unref(&redeemers);
  cardano_costmdls_unref(&costmdls);
}

TEST(cardano_compute_script_data_hash, returnsErrorIfCostMdlsAreNull)
{
  cardano_redeemer_t*      redeemer  = create_redeemer(REDEEMER_CBOR);
  cardano_redeemer_list_t* redeemers = NULL;
  cardano_blake2b_hash_t*  data_hash = NULL;

  EXPECT_EQ(cardano_redeemer_list_new(&redeemers), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_redeemer_list_add(redeemers, redeemer), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_compute_script_data_hash(NULL, redeemers, NULL, &data_hash), CARDANO_ERROR_POINTER_IS_NULL);

  cardano_redeemer_unref(&redeemer);
  cardano_redeemer_list_unref(&redeemers);
}

TEST(cardano_compute_script_data_hash, returnsErrorIfDataHashIsNull)
{
  cardano_redeemer_t*      redeemer  = create_redeemer(REDEEMER_CBOR);
  cardano_redeemer_list_t* redeemers = NULL;
  cardano_costmdls_t*      costmdls  = NULL;

  EXPECT_EQ(cardano_costmdls_new(&costmdls), CARDANO_SUCCESS);

  EXPECT_EQ(cardano_redeemer_list_new(&redeemers), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_redeemer_list_add(redeemers, redeemer), CARDANO_SUCCESS);
  EXPECT_EQ(cardano_compute_script_data_hash(costmdls, redeemers, NULL, NULL), CARDANO_ERROR_POINTER_IS_NULL);

  cardano_redeemer_unref(&redeemer);
  cardano_redeemer_list_unref(&redeemers);
  cardano_costmdls_unref(&costmdls);
}

TEST(cardano_compute_script_data_hash, doesntCrashOnMemoryAllocError)
{
  cardano_transaction_t* tx             = create_transaction(TX_CBOR);
  cardano_cost_model_t*  plutusV1_costs = build_cost_model(&alonzoPlutusV1CostModel[0], sizeof(alonzoPlutusV1CostModel) / sizeof(alonzoPlutusV1CostModel[0]), CARDANO_PLUTUS_LANGUAGE_VERSION_V1);
  cardano_costmdls_t*    costmdls       = NULL;

  cardano_error_t result = cardano_costmdls_new(&costmdls);

  EXPECT_EQ(result, CARDANO_SUCCESS);

  result = cardano_costmdls_insert(costmdls, plutusV1_costs);

  EXPECT_EQ(result, CARDANO_SUCCESS);

  cardano_transaction_body_t* body         = cardano_transaction_get_body(tx);
  cardano_witness_set_t*      witness_set  = cardano_transaction_get_witness_set(tx);
  cardano_redeemer_list_t*    redeemers    = cardano_witness_set_get_redeemers(witness_set);
  cardano_plutus_data_set_t*  datums       = cardano_witness_set_get_plutus_data(witness_set);
  cardano_blake2b_hash_t*     tx_data_hash = cardano_transaction_body_get_script_data_hash(body);

  for (int i = 0; i < 18; ++i)
  {
    reset_allocators_run_count();
    set_malloc_limit(i);
    cardano_set_allocators(fail_malloc_at_limit, realloc, free);

    cardano_blake2b_hash_t* data_hash = NULL;
    result                            = cardano_compute_script_data_hash(costmdls, redeemers, datums, &data_hash);

    EXPECT_EQ(result, CARDANO_ERROR_MEMORY_ALLOCATION_FAILED);
    cardano_blake2b_hash_unref(&data_hash);
  }

  cardano_transaction_unref(&tx);
  cardano_costmdls_unref(&costmdls);
  cardano_cost_model_unref(&plutusV1_costs);
  cardano_blake2b_hash_unref(&tx_data_hash);
  cardano_witness_set_unref(&witness_set);
  cardano_transaction_body_unref(&body);
  cardano_redeemer_list_unref(&redeemers);
  cardano_plutus_data_set_unref(&datums);
}