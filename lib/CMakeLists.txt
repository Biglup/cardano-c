SET (LIB_OUTPUT_NAME cardano-c)

# Find external packages
SET (sodium_USE_STATIC_LIBS ON)

INCLUDE_DIRECTORIES (SYSTEM ./include)

# Add libsodium
INCLUDE_DIRECTORIES(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/libsodium/include)
INCLUDE_DIRECTORIES(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/libsodium/include/sodium)

FILE(GLOB_RECURSE LIBSODIUM_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/external/libsodium/*.c)
FILE(GLOB_RECURSE LIBSODIUM_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/external/libsodium/*.h)

ADD_LIBRARY(libsodium OBJECT ${LIBSODIUM_SOURCES})
SET_TARGET_PROPERTIES(libsodium PROPERTIES POSITION_INDEPENDENT_CODE ON)

# Suppress warnings for libsodium
SET_TARGET_PROPERTIES(libsodium PROPERTIES C_CLANG_TIDY "")
SET_TARGET_PROPERTIES(libsodium PROPERTIES CXX_CLANG_TIDY "")
if (CMAKE_C_COMPILER_ID MATCHES "Clang|AppleClang|GNU")
  TARGET_COMPILE_OPTIONS(libsodium PRIVATE -w)
elseif (CMAKE_C_COMPILER_ID MATCHES "MSVC")
  TARGET_COMPILE_OPTIONS(libsodium PRIVATE /W0)
endif()

# Add GMP mini
INCLUDE_DIRECTORIES(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/gmp)

FILE(GLOB GMP_MINI_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/external/gmp/*.c)
FILE(GLOB GMP_MINI_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/external/gmp/*.h)

# Add GMP mini object library
ADD_LIBRARY(gmp-mini OBJECT ${GMP_MINI_SOURCES})
SET_TARGET_PROPERTIES(gmp-mini PROPERTIES POSITION_INDEPENDENT_CODE ON)

# Suppress warnings for GMP mini files
SET_TARGET_PROPERTIES(gmp-mini PROPERTIES C_CLANG_TIDY "")
SET_TARGET_PROPERTIES(gmp-mini PROPERTIES CXX_CLANG_TIDY "")
if (CMAKE_C_COMPILER_ID MATCHES "Clang|AppleClang|GNU")
  TARGET_COMPILE_OPTIONS(gmp-mini PRIVATE -w)
elseif (CMAKE_C_COMPILER_ID MATCHES "MSVC")
  TARGET_COMPILE_OPTIONS(gmp-mini PRIVATE /W0)
endif()

# Add JSON_C object library
ADD_SUBDIRECTORY(external/json-c)
INCLUDE_DIRECTORIES(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/external/json-c)

FILE(GLOB JSON_C_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/external/json-c/*.c)
FILE(GLOB JSON_C_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/external/json-c/*.h)

ADD_LIBRARY(jsonc OBJECT ${JSON_C_SOURCES})
SET_TARGET_PROPERTIES(jsonc PROPERTIES POSITION_INDEPENDENT_CODE ON)

# Suppress warnings for JSON_C mini files
SET_TARGET_PROPERTIES(jsonc PROPERTIES C_CLANG_TIDY "")
SET_TARGET_PROPERTIES(jsonc PROPERTIES CXX_CLANG_TIDY "")
if (CMAKE_C_COMPILER_ID MATCHES "Clang|AppleClang|GNU")
  TARGET_COMPILE_OPTIONS(jsonc PRIVATE -w)
elseif (CMAKE_C_COMPILER_ID MATCHES "MSVC")
  TARGET_COMPILE_OPTIONS(jsonc PRIVATE /W0)
endif()

IF (UNIX)
  FIND_LIBRARY(MATH_LIBRARY m REQUIRED)
ELSE()
  SET(MATH_LIBRARY "")
ENDIF()

IF (UNIX AND NOT APPLE)
  SET (RT_LIBRARIES rt)
ELSE ()
  SET (RT_LIBRARIES)
ENDIF ()

# Create configuration header
CONFIGURE_FILE ("${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in" "${CMAKE_CURRENT_SOURCE_DIR}/src/config.h")
CONFIGURE_FILE ("${CMAKE_CURRENT_SOURCE_DIR}/${LIB_OUTPUT_NAME}.pc.in" "${CMAKE_CURRENT_BINARY_DIR}/${LIB_OUTPUT_NAME}.pc")

# Source code files
FILE (GLOB_RECURSE HEADER_FILES include/*.h include/*.inl)
FILE (GLOB_RECURSE SOURCE_FILES src/*.c include/*.h include/*.inl)
FILE (GLOB_RECURSE TEST_SRC_FILES tests/*.cpp tests/*.h tests/*.inl)

if (NOT DISABLE_STATIC_FPIC)
  # Use '-fPIC'/'-fPIE' option.
  SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

SET(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

OPTION(BUILD_SHARED_LIBS "Default to building shared libraries" ON)
OPTION(BUILD_STATIC_LIBS  "Default to building shared libraries" OFF)

if (BUILD_SHARED_LIBS)
  ADD_DEFINITIONS(-D CARDANO_C_DLL)
endif()

ADD_DEFINITIONS(-D SODIUM_STATIC)
ADD_DEFINITIONS(-D JSONC_STATIC)

# Compiler options
IF (CMAKE_COMPILER_IS_GNUC)
  SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -pedantic-errors -Wall -Wextra -Werror -Wswitch-enum -DHAVE_CONFIG_H")
ENDIF ()

# Build shared library
ADD_LIBRARY(${LIB_OUTPUT_NAME} SHARED ${SOURCE_FILES} $<TARGET_OBJECTS:gmp-mini> $<TARGET_OBJECTS:libsodium> $<TARGET_OBJECTS:jsonc>)

IF (WIN32)
  SET_TARGET_PROPERTIES(${LIB_OUTPUT_NAME} PROPERTIES C_CLANG_TIDY "")
ENDIF()

TARGET_LINK_LIBRARIES(${LIB_OUTPUT_NAME}
  ${MATH_LIBRARY}
)

# Build static library if enabled
if (BUILD_STATIC_LIBS AND BUILD_SHARED_LIBS)
  SET(STATIC_LIB ${PROJECT_NAME}-static)
  ADD_LIBRARY(${STATIC_LIB} STATIC ${SOURCE_FILES} $<TARGET_OBJECTS:gmp-mini> $<TARGET_OBJECTS:libsodium> $<TARGET_OBJECTS:jsonc>)

  TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}-static
          PUBLIC
          $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
          $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
  )

  TARGET_LINK_LIBRARIES(${PROJECT_NAME}-static
    PRIVATE ${MATH_LIBRARY}
  )

  # rename the static library
  if (NOT MSVC)
    SET_TARGET_PROPERTIES(${STATIC_LIB} PROPERTIES
            OUTPUT_NAME ${LIB_OUTPUT_NAME}
    )
  endif()
  LIST(APPEND CMAKE_TARGETS ${STATIC_LIB})
endif ()

# Code Coverage
IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
  SET(GCC_COVERAGE_COMPILE_FLAGS "-fprofile-arcs -ftest-coverage")
  SET(GCC_COVERAGE_LINK_FLAGS "-lgcov")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
ENDIF ()

IF (CMAKE_BUILD_TYPE STREQUAL "Fuzz")
  # Set compiler to Clang explicitly
  SET(CMAKE_C_COMPILER "clang")
  SET(CMAKE_CXX_COMPILER "clang++")

  # Define additional flags for fuzzing
  SET(CLANG_COMPILE_FLAGS "-g -O1 -fsanitize=fuzzer,address -fprofile-instr-generate -fcoverage-mapping -fprofile-arcs -ftest-coverage")
  SET(CLANG_LINK_FLAGS "-fsanitize=fuzzer,address -fprofile-instr-generate --coverage")

  # Append the fuzzing flags to the existing flags
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CLANG_COMPILE_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CLANG_COMPILE_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${CLANG_LINK_FLAGS}")
ENDIF ()

# Build tests
IF (TESTING_ENABLED AND TEST_SRC_FILES)
  SET (PROJECT_TEST_NAME test-${LIB_OUTPUT_NAME})
  PROJECT (${PROJECT_TEST_NAME} CXX)

  SET(CMAKE_CXX_STANDARD 20)
  SET(CMAKE_CXX_STANDARD_REQUIRED ON)
  SET(CMAKE_CXX_EXTENSIONS OFF)

  FIND_PACKAGE (GTest       REQUIRED)

  ADD_EXECUTABLE (${PROJECT_TEST_NAME} ${TEST_SRC_FILES})

  IF (WIN32)
    IF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      TARGET_COMPILE_OPTIONS(${PROJECT_TEST_NAME} PRIVATE -finput-charset=UTF-8 -fexec-charset=UTF-8)
    ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
      TARGET_COMPILE_OPTIONS(${PROJECT_TEST_NAME} PRIVATE /std:c++20 /utf-8)
    ENDIF()

    TARGET_COMPILE_DEFINITIONS(${PROJECT_TEST_NAME} PRIVATE UNICODE _UNICODE)
  ENDIF()

  TARGET_LINK_LIBRARIES (${PROJECT_TEST_NAME}
          PRIVATE ${LIB_OUTPUT_NAME}
          PRIVATE ${GTEST_MAIN_LIBRARY}
          PRIVATE ${GTEST_LIBRARY}
          PRIVATE ${GTEST_MAIN_LIBRARIES}
          PRIVATE ${GTEST_LIBRARIES}
  )

  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} SYSTEM PRIVATE ${GTEST_INCLUDE_DIR})
  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} SYSTEM PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_SOURCE_DIR}/src")

  GTEST_ADD_TESTS ("${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_TEST_NAME}" "" ${TEST_SRC_FILES})
ENDIF ()