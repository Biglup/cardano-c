SET (LIB_OUTPUT_NAME cardano-c)

# Find external packages
SET (sodium_USE_STATIC_LIBS ON)

FIND_PACKAGE (Sodium REQUIRED)

INCLUDE_DIRECTORIES (SYSTEM ${sodium_INCLUDE_DIR})
INCLUDE_DIRECTORIES (SYSTEM ./include)

IF (UNIX AND NOT APPLE)
  SET (RT_LIBRARIES rt)
ELSE ()
  SET (RT_LIBRARIES)
ENDIF ()

# Create configuration header
CONFIGURE_FILE ("${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in" "${CMAKE_CURRENT_SOURCE_DIR}/src/config.h")

# Source code files
FILE (GLOB_RECURSE HEADER_FILES include/*.h include/*.inl)
FILE (GLOB_RECURSE SOURCE_FILES src/*.c include/*.h include/*.inl)
FILE (GLOB_RECURSE TEST_SRC_FILES tests/*.cpp tests/*.h tests/*.inl)

# Compiler options
IF (CMAKE_COMPILER_IS_GNUC)
  SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -pedantic-errors -Wall -Wextra -Werror -Wswitch-enum -DHAVE_CONFIG_H")
ENDIF ()

# Build library
ADD_LIBRARY (${LIB_OUTPUT_NAME} SHARED ${SOURCE_FILES})

TARGET_LINK_LIBRARIES (${LIB_OUTPUT_NAME}
  PRIVATE ${sodium_LIBRARY_RELEASE}
)

# VALGRIND
FIND_PROGRAM( MEMORYCHECK_COMMAND valgrind )
SET( MEMORYCHECK_COMMAND_OPTIONS "--trace-children=yes --leak-check=full" )

# Code Coverage
SET(GCC_COVERAGE_COMPILE_FLAGS "-fprofile-arcs -ftest-coverage")
SET(GCC_COVERAGE_LINK_FLAGS "-lgcov")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")

# Pre-compiled header support
IF (COTIRE_ENABLED)
  INCLUDE (Cotire)
  COTIRE (${LIB_OUTPUT_NAME})
ENDIF ()

INSTALL (
  TARGETS     ${LIB_OUTPUT_NAME}
  DESTINATION lib
  COMPONENT   lib
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ GROUP_WRITE WORLD_READ WORLD_WRITE
)

INSTALL (
  DIRECTORY   ${CMAKE_CURRENT_SOURCE_DIR}/include/cardano
  DESTINATION include
  COMPONENT   dev
  PATTERN     "*.h"
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ GROUP_WRITE WORLD_READ
)

INSTALL (
  DIRECTORY   ${CMAKE_CURRENT_SOURCE_DIR}/include/cardano
  DESTINATION include
  COMPONENT   dev
  PATTERN     "*.inl"
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ GROUP_WRITE WORLD_READ
)

# Build tests
IF (TESTING_ENABLED AND TEST_SRC_FILES)
  SET (PROJECT_TEST_NAME test-${LIB_OUTPUT_NAME})
  PROJECT (PROJECT_TEST_NAME CXX)

  FIND_PACKAGE (GTest       REQUIRED)
  FIND_PACKAGE (GoogleMocks REQUIRED)

  ADD_EXECUTABLE (${PROJECT_TEST_NAME} ${TEST_SRC_FILES})

  TARGET_LINK_LIBRARIES (${PROJECT_TEST_NAME}
    PRIVATE ${LIB_OUTPUT_NAME}
    PRIVATE ${GTEST_MAIN_LIBRARY}
    PRIVATE ${GTEST_LIBRARY}
    PRIVATE ${GTEST_MAIN_LIBRARIES}
    PRIVATE ${GTEST_LIBRARIES}
    PRIVATE ${GoogleMocks_LIBRARIES}
  )

  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} SYSTEM PRIVATE ${GTEST_INCLUDE_DIR})
  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} SYSTEM PRIVATE ${GoogleMocks_INCLUDE_DIRS})
  TARGET_INCLUDE_DIRECTORIES (${PROJECT_TEST_NAME} SYSTEM PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_SOURCE_DIR}/src")

  GTEST_ADD_TESTS ("${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_TEST_NAME}" "" ${TEST_SRC_FILES})
ENDIF ()