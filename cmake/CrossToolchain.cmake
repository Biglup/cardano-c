SET (CMAKE_SYSTEM_NAME Linux)
SET (CMAKE_SYSTEM_VERSION 1)

IF (BUILD_ARCHITECTURE STREQUAL "armel" OR BUILD_ARCHITECTURE STREQUAL "armhf")
  SET (BUILD_ARCHITECTURE ${BUILD_ARCHITECTURE} CACHE STRING "")

  SET (CMAKE_SYSTEM_PROCESSOR arm)

  IF (BUILD_ARCHITECTURE STREQUAL "armel")
    SET (ARCHITECTURE_FULL_NAME "arm-linux-gnueabi" CACHE STRING "")
  ELSE ()
    SET (ARCHITECTURE_FULL_NAME "arm-linux-gnueabihf" CACHE STRING "")
  ENDIF()

  SET (CMAKE_C_COMPILER   /usr/bin/${ARCHITECTURE_FULL_NAME}-gcc     CACHE PATH "" FORCE)
  SET (CMAKE_CXX_COMPILER /usr/bin/${ARCHITECTURE_FULL_NAME}-g++     CACHE PATH "" FORCE)
  SET (CMAKE_AR           /usr/bin/${ARCHITECTURE_FULL_NAME}-ar      CACHE PATH "" FORCE)
  SET (CMAKE_RANLIB       /usr/bin/${ARCHITECTURE_FULL_NAME}-ranlib  CACHE PATH "" FORCE)
  SET (CMAKE_LINKER       /usr/bin/${ARCHITECTURE_FULL_NAME}-ld      CACHE PATH "" FORCE)
  SET (CMAKE_OBJCOPY      /usr/bin/${ARCHITECTURE_FULL_NAME}-objcopy CACHE PATH "" FORCE)
  SET (CMAKE_STRIP        /usr/bin/${ARCHITECTURE_FULL_NAME}-strip   CACHE PATH "" FORCE)

  IF (BUILD_ARCHITECTURE STREQUAL "armel")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfloat-abi=softfp" CACHE STRING "")
    SET (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -mfloat-abi=softfp"   CACHE STRING "")
  ELSE ()
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfloat-abi=hard" CACHE STRING "")
    SET (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -mfloat-abi=hard"   CACHE STRING "")
  ENDIF ()

  IF (USE_NEON)
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpu=neon")
    SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfpu=neon")
  ELSEIF (USE_VFPV3)
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpu=vfpv3")
    SET (CMAKE_C_FLA=GS "${CMAKE_C_FLAGS} -mfpu=vfpv3")
  ELSE ()
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpu=vfpv3-d16")
    SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfpu=vfpv3-d16")
  ENDIF ()

  SET (_GCC_OPTIONS "-mthumb -fdata-sections -Wa,--noexecstack -fsigned-char -Wno-psabi")

  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${_GCC_OPTIONS}")
  SET (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${_GCC_OPTIONS}")

  SET (_LINKER_OPTIONS "-Wl,--fix-cortex-a8 -Wl,--no-undefined -Wl,--gc-sections -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now")

  SET (CMAKE_SHARED_LINKER_FLAGS "${_LINKER_OPTIONS} ${CMAKE_SHARED_LINKER_FLAGS}" CACHE STRING "")
  SET (CMAKE_MODULE_LINKER_FLAGS "${_LINKER_OPTIONS} ${CMAKE_MODULE_LINKER_FLAGS}" CACHE STRING "")
  SET (CMAKE_EXE_LINKER_FLAGS    "${_LINKER_OPTIONS} -Wl,-z,nocopyreloc ${CMAKE_EXE_LINKER_FLAGS}" CACHE STRING "")
ELSEIF (BUILD_ARCHITECTURE STREQUAL "i386" OR BUILD_ARCHITECTURE STREQUAL "x86_64")
  SET (BUILD_ARCHITECTURE ${BUILD_ARCHITECTURE} CACHE STRING "")
  SET (ARCHITECTURE_FULL_NAME "${BUILD_ARCHITECTURE}-linux-gnu" CACHE STRING "")

  SET (CMAKE_C_COMPILER   /usr/bin/gcc     CACHE PATH "" FORCE)
  SET (CMAKE_CXX_COMPILER /usr/bin/g++     CACHE PATH "" FORCE)
  SET (CMAKE_AR           /usr/bin/ar      CACHE PATH "" FORCE)
  SET (CMAKE_RANLIB       /usr/bin/ranlib  CACHE PATH "" FORCE)
  SET (CMAKE_LINKER       /usr/bin/ld      CACHE PATH "" FORCE)
  SET (CMAKE_OBJCOPY      /usr/bin/objcopy CACHE PATH "" FORCE)
  SET (CMAKE_STRIP        /usr/bin/strip   CACHE PATH "" FORCE)

  IF (BUILD_ARCHITECTURE STREQUAL "x86_64")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64" CACHE STRING "")
    SET (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -m64" CACHE STRING "")
  ELSE ()
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" CACHE STRING "")
    SET (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -m32" CACHE STRING "")
  ENDIF ()

  SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}" CACHE STRING "")
  SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}" CACHE STRING "")
  SET (CMAKE_EXE_LINKER_FLAGS    "${CMAKE_EXE_LINKER_FLAGS}"    CACHE STRING "")
ENDIF ()

IF (DEFINED ENV{TOOLCHAIN_SYSROOT})
  SET (TOOLCHAIN_SYSROOT $ENV{TOOLCHAIN_SYSROOT} CACHE PATH "Cross compilation system root.")
ELSE ()
  SET (TOOLCHAIN_SYSROOT /srv/chroot/${BUILD_ARCHITECTURE} CACHE PATH "Cross compilation system root.")
  MESSAGE (STATUS "Enviroment variable TOOLCHAIN_SYSROOT not found. Using default value.")
ENDIF ()

MESSAGE (STATUS "Cross compilation base path: ${TOOLCHAIN_SYSROOT}")

IF (NOT EXISTS ${TOOLCHAIN_SYSROOT})
  MESSAGE (FATAL_ERROR "Cross compilation base path not found!. Please set TOOLCHAIN_SYSROOT enviroment variable.")
ENDIF ()

SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -isystem ${TOOLCHAIN_SYSROOT}/usr/include/${ARCHITECTURE_FULL_NAME}")
SET (CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -isystem ${TOOLCHAIN_SYSROOT}/usr/include/${ARCHITECTURE_FULL_NAME}")

SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath-link ${TOOLCHAIN_SYSROOT}/lib/")
SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath-link ${TOOLCHAIN_SYSROOT}/usr/lib/")
SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath-link ${TOOLCHAIN_SYSROOT}/lib/${ARCHITECTURE_FULL_NAME}")
SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath-link ${TOOLCHAIN_SYSROOT}/usr/lib/${ARCHITECTURE_FULL_NAME}")
SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath-link ${TOOLCHAIN_SYSROOT}/usr/lib/${ARCHITECTURE_FULL_NAME}/mesa")
SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath-link ${TOOLCHAIN_SYSROOT}/usr/lib/${ARCHITECTURE_FULL_NAME}/pulseaudio")

SET (CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_SYSROOT})
SET (ENV{PKG_CONFIG_LIBDIR} "${TOOLCHAIN_SYSROOT}/usr/lib/${ARCHITECTURE_FULL_NAME}:${TOOLCHAIN_SYSROOT}/usr/lib:${TOOLCHAIN_SYSROOT}/usr/share")
SET (ENV{PKG_CONFIG_PATH}   "${TOOLCHAIN_SYSROOT}/usr/lib/${ARCHITECTURE_FULL_NAME}/pkgconfig:${TOOLCHAIN_SYSROOT}/usr/lib/pkgconfig:${TOOLCHAIN_SYSROOT}/usr/share/pkgconfig")

SET (CMAKE_LIBRARY_PATH /lib/${ARCHITECTURE_FULL_NAME} /usr/lib/${ARCHITECTURE_FULL_NAME})

IF ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
  SET (CMAKE_SKIP_RPATH TRUE CACHE BOOL "")
ELSE ()
  SET (CMAKE_SKIP_RPATH FALSE CACHE BOOL "Runtime paths are added when using shared libraries.")
ENDIF ()

SET (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
SET (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
SET (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)

#
# Macro to find programs on the host OS
#
MACRO (FIND_HOST_PROGRAM)
  SET (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  SET (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)
  SET (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)

  IF (CMAKE_HOST_WIN32)
    SET (WIN32 1)
    SET (UNIX)
  ELSEIF (CMAKE_HOST_APPLE)
    SET(APPLE 1)
    SET(UNIX)
  ENDIF ()

  FIND_PROGRAM (${ARGN})

  SET (WIN32)
  SET (APPLE)
  SET (UNIX 1)

  SET (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
  SET (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  SET (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
ENDMACRO ()

#
# Macro to find packages on the host OS
#
MACRO (FIND_HOST_PACKAGE)
  SET (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  SET (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)
  SET (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)

  IF (CMAKE_HOST_WIN32)
    SET (WIN32 1)
    SET (UNIX)
  ELSEIF (CMAKE_HOST_APPLE)
    SET (APPLE 1)
    SET (UNIX)
  ENDIF ()

  FIND_PACKAGE (${ARGN})

  SET (WIN32)
  SET (APPLE)
  SET (UNIX 1)

  SET (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
  SET (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  SET (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
ENDMACRO ()
