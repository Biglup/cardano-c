name: Generate Release

on:
  release:
    types: [created]

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Ubuntu
          - os: ubuntu-latest
            arch: x86_64
            compiler: gcc
          - os: ubuntu-latest
            arch: arm64
            compiler: gcc
          # macOS
          - os: macos-latest
            arch: x86_64
            compiler: gcc
          - os: macos-latest
            arch: arm64
            compiler: gcc
          # Windows
          - os: windows-latest
            arch: x86_64
            compiler: msvc
          - os: windows-latest
            arch: x86_64
            compiler: mingw

    name: Build on ${{ matrix.os }} for ${{ matrix.arch }} using ${{ matrix.compiler }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read version
        id: version
        run: |
          source VERSION
          echo "VERSION_MAJOR=$VERSION_MAJOR" >> $GITHUB_ENV
          echo "VERSION_MINOR=$VERSION_MINOR" >> $GITHUB_ENV
          echo "VERSION_PATCH=$VERSION_PATCH" >> $GITHUB_ENV
          echo "VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            case "${{ matrix.arch }}" in
              arm64) sudo apt-get install -y gcc-aarch64-linux-gnu ;;
            esac
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $GITHUB_ENV
            eval "$(/opt/homebrew/bin/brew shellenv)"
            brew install cmake
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if [[ "${{ matrix.compiler }}" == "mingw" ]]; then
              powershell -Command "Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
              choco install mingw
              echo "C:\tools\mingw64\bin" >> $GITHUB_PATH
            fi
          fi

      - name: Build
        run: |
          mkdir build
          cd build
          case "${{ matrix.arch }}" in
            arm64)
              cmake -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DVERSION_MAJOR=${{ env.VERSION_MAJOR }} -DVERSION_MINOR=${{ env.VERSION_MINOR }} -DVERSION_PATCH=${{ env.VERSION_PATCH }} -DCMAKE_BUILD_TYPE=Release ..
              ;;
            x86_64)
              if [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.compiler }}" == "msvc" ]]; then
                cmake -G "Visual Studio 16 2019" -A x64 -DVERSION_MAJOR=${{ env.VERSION_MAJOR }} -DVERSION_MINOR=${{ env.VERSION_MINOR }} -DVERSION_PATCH=${{ env.VERSION_PATCH }} ..
              elif [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.compiler }}" == "mingw" ]]; then
                cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DVERSION_MAJOR=${{ env.VERSION_MAJOR }} -DVERSION_MINOR=${{ env.VERSION_MINOR }} -DVERSION_PATCH=${{ env.VERSION_PATCH }} ..
              else
                cmake -DCMAKE_SYSTEM_PROCESSOR=x86_64 -DVERSION_MAJOR=${{ env.VERSION_MAJOR }} -DVERSION_MINOR=${{ env.VERSION_MINOR }} -DVERSION_PATCH=${{ env.VERSION_PATCH }} -DCMAKE_BUILD_TYPE=Release ..
              fi
              ;;
          esac
          cmake --build . --config Release

      - name: Package binaries
        run: |
          mkdir -p release/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}
          cp -r include release/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}/
          cp build/*.a build/*.so build/*.dll build/*.lib build/*.dylib release/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}/ 2>/dev/null || true
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            zip -r "release-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}.zip" release/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}
          else
            tar -czf "release-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}.tar.gz" -C release/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }} .
          fi

      - name: Upload artifacts to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: |
            release-*.zip
            release-*.tar.gz
          asset_name: |
            release-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}.zip
            release-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.compiler }}.tar.gz
          asset_content_type: |
            application/zip
            application/gzip
