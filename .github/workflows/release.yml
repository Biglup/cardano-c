name: Generate Release

on:
  release:
    types: [created]

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Ubuntu
          - os: ubuntu-latest
            arch: x86_64
            compiler: gcc
          - os: ubuntu-latest
            arch: arm64
            compiler: gcc
          # macOS
          - os: macos-latest
            arch: x86_64
            compiler: gcc
          - os: macos-latest
            arch: arm64
            compiler: gcc
          # Windows
          - os: windows-latest
            arch: x86_64
            compiler: msvc
          - os: windows-latest
            arch: x86_64
            compiler: mingw

    name: Build on ${{ matrix.os }} for ${{ matrix.arch }} using ${{ matrix.compiler }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read version (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          source VERSION
          echo "VERSION_MAJOR=$VERSION_MAJOR" >> $GITHUB_ENV
          echo "VERSION_MINOR=$VERSION_MINOR" >> $GITHUB_ENV
          echo "VERSION_PATCH=$VERSION_PATCH" >> $GITHUB_ENV
          echo "VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH" >> $GITHUB_ENV

      - name: Read version (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $versionContent = Get-Content VERSION
          foreach ($line in $versionContent) {
            if ($line -match 'VERSION_MAJOR=(.*)') { $env:VERSION_MAJOR = $Matches[1] }
            if ($line -match 'VERSION_MINOR=(.*)') { $env:VERSION_MINOR = $Matches[1] }
            if ($line -match 'VERSION_PATCH=(.*)') { $env:VERSION_PATCH = $Matches[1] }
          }
          Add-Content -Path $env:GITHUB_ENV -Value "VERSION_MAJOR=$($env:VERSION_MAJOR)"
          Add-Content -Path $env:GITHUB_ENV -Value "VERSION_MINOR=$($env:VERSION_MINOR)"
          Add-Content -Path $env:GITHUB_ENV -Value "VERSION_PATCH=$($env:VERSION_PATCH)"
          Add-Content -Path $env:GITHUB_ENV -Value "VERSION=$($env:VERSION_MAJOR).$($env:VERSION_MINOR).$($env:VERSION_PATCH)"

      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            case "${{ matrix.arch }}" in
              arm64) sudo apt-get install -y gcc-aarch64-linux-gnu ;;
            esac
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # No need to install cmake, it's already installed
            cmake --version
          fi

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if ("${{ matrix.compiler }}" -eq 'mingw') {
            Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            choco install -y mingw
            # Add mingw to PATH
            "C:\tools\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

      - name: Build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir build
          cd build
          case "${{ matrix.arch }}" in
            arm64)
              cmake -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DVERSION=${{ env.VERSION }} -DCMAKE_BUILD_TYPE=Release ..
              ;;
            x86_64)
              cmake -DCMAKE_SYSTEM_PROCESSOR=x86_64 -DVERSION=${{ env.VERSION }} -DCMAKE_BUILD_TYPE=Release ..
              ;;
          esac
          cmake --build . --config Release

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir build
          cd build
          if [[ "${{ matrix.compiler }}" == "msvc" ]]; then
            cmake -G "Visual Studio 16 2019" -A x64 -DVERSION=${{ env.VERSION }} ..
            cmake --build . --config Release
          elif [[ "${{ matrix.compiler }}" == "mingw" ]]; then
            cmake -G "MinGW Makefiles" -DVERSION=${{ env.VERSION }} -DCMAKE_BUILD_TYPE=Release ..
            cmake --build . --config Release
          fi

      - name: Package binaries (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p release/${{ env.RELEASE_NAME }}
          cp -r include release/${{ env.RELEASE_NAME }}/
          cp build/*.a build/*.so build/*.dylib release/${{ env.RELEASE_NAME }}/ 2>/dev/null || true
          tar -czf "release-${{ env.RELEASE_NAME }}.tar.gz" -C release/${{ env.RELEASE_NAME }} .

      - name: Package binaries (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir -p release\${{ env.RELEASE_NAME }}
          Copy-Item -Recurse include release\${{ env.RELEASE_NAME }}\include
          Copy-Item build\*.dll, build\*.lib release\${{ env.RELEASE_NAME }} -ErrorAction SilentlyContinue
          Compress-Archive -Path release\${{ env.RELEASE_NAME }}\* -DestinationPath "release-${{ env.RELEASE_NAME }}.zip"

      - name: Upload artifacts to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: |
            release-${{ env.RELEASE_NAME }}.zip
            release-${{ env.RELEASE_NAME }}.tar.gz
          asset_name: |
            release-${{ env.RELEASE_NAME }}.zip
            release-${{ env.RELEASE_NAME }}.tar.gz
          asset_content_type: |
            application/zip
            application/gzip
